/*
** Copyright (c) 2018-2023 Valve Corporation
** Copyright (c) 2018-2023 LunarG, Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and associated documentation files (the "Software"),
** to deal in the Software without restriction, including without limitation
** the rights to use, copy, modify, merge, publish, distribute, sublicense,
** and/or sell copies of the Software, and to permit persons to whom the
** Software is furnished to do so, subject to the following conditions:
**
** The above copyright notice and this permission notice shall be included in
** all copies or substantial portions of the Software.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
** FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
*/

/*
** This file is generated from the Khronos Vulkan XML API Registry.
**
*/

#ifndef  GFXRECON_GENERATED_VULKAN_DISPATCH_TABLE_H
#define  GFXRECON_GENERATED_VULKAN_DISPATCH_TABLE_H

#include "platform_types.h"
#include "logging.h"

#include "vulkan/vk_layer.h"
#include "vulkan/vulkan.h"
#include "vk_video/vulkan_video_codec_h264std.h"
#include "vk_video/vulkan_video_codec_h264std_decode.h"
#include "vk_video/vulkan_video_codec_h264std_encode.h"
#include "vk_video/vulkan_video_codec_h265std.h"
#include "vk_video/vulkan_video_codec_h265std_decode.h"
#include "vk_video/vulkan_video_codec_h265std_encode.h"
#include "vk_video/vulkan_video_codecs_common.h"

#ifdef WIN32
#ifdef CreateEvent
#undef CreateEvent
#endif
#ifdef CreateSemaphore
#undef CreateSemaphore
#endif
#endif


typedef const void* DispatchKey;

// Retrieve a dispatch key from a dispatchable handle
static DispatchKey GetDispatchKey(const void* handle)
{
    const DispatchKey* dispatch_key = reinterpret_cast<const DispatchKey*>(handle);
    return (*dispatch_key);
}
struct LayerTable
{
    PFN_vkCreateInstance CreateInstance{ nullptr };
    PFN_vkCreateDevice CreateDevice{ nullptr };
};

struct InstanceTable
{
    PFN_vkDestroyInstance DestroyInstance{ nullptr };
    PFN_vkEnumeratePhysicalDevices EnumeratePhysicalDevices{ nullptr };
    PFN_vkGetPhysicalDeviceFeatures GetPhysicalDeviceFeatures{ nullptr };
    PFN_vkGetPhysicalDeviceFormatProperties GetPhysicalDeviceFormatProperties{ nullptr };
    PFN_vkGetPhysicalDeviceImageFormatProperties GetPhysicalDeviceImageFormatProperties{ nullptr };
    PFN_vkGetPhysicalDeviceProperties GetPhysicalDeviceProperties{ nullptr };
    PFN_vkGetPhysicalDeviceQueueFamilyProperties GetPhysicalDeviceQueueFamilyProperties{ nullptr };
    PFN_vkGetPhysicalDeviceMemoryProperties GetPhysicalDeviceMemoryProperties{ nullptr };
    PFN_vkGetInstanceProcAddr GetInstanceProcAddr{ nullptr };
    PFN_vkEnumerateDeviceExtensionProperties EnumerateDeviceExtensionProperties{ nullptr };
    PFN_vkEnumerateDeviceLayerProperties EnumerateDeviceLayerProperties{ nullptr };
    PFN_vkGetPhysicalDeviceSparseImageFormatProperties GetPhysicalDeviceSparseImageFormatProperties{ nullptr };
    PFN_vkEnumeratePhysicalDeviceGroups EnumeratePhysicalDeviceGroups{ nullptr };
    PFN_vkGetPhysicalDeviceFeatures2 GetPhysicalDeviceFeatures2{ nullptr };
    PFN_vkGetPhysicalDeviceProperties2 GetPhysicalDeviceProperties2{ nullptr };
    PFN_vkGetPhysicalDeviceFormatProperties2 GetPhysicalDeviceFormatProperties2{ nullptr };
    PFN_vkGetPhysicalDeviceImageFormatProperties2 GetPhysicalDeviceImageFormatProperties2{ nullptr };
    PFN_vkGetPhysicalDeviceQueueFamilyProperties2 GetPhysicalDeviceQueueFamilyProperties2{ nullptr };
    PFN_vkGetPhysicalDeviceMemoryProperties2 GetPhysicalDeviceMemoryProperties2{ nullptr };
    PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 GetPhysicalDeviceSparseImageFormatProperties2{ nullptr };
    PFN_vkGetPhysicalDeviceExternalBufferProperties GetPhysicalDeviceExternalBufferProperties{ nullptr };
    PFN_vkGetPhysicalDeviceExternalFenceProperties GetPhysicalDeviceExternalFenceProperties{ nullptr };
    PFN_vkGetPhysicalDeviceExternalSemaphoreProperties GetPhysicalDeviceExternalSemaphoreProperties{ nullptr };
    PFN_vkGetPhysicalDeviceToolProperties GetPhysicalDeviceToolProperties{ nullptr };
    PFN_vkDestroySurfaceKHR DestroySurfaceKHR{ nullptr };
    PFN_vkGetPhysicalDeviceSurfaceSupportKHR GetPhysicalDeviceSurfaceSupportKHR{ nullptr };
    PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR GetPhysicalDeviceSurfaceCapabilitiesKHR{ nullptr };
    PFN_vkGetPhysicalDeviceSurfaceFormatsKHR GetPhysicalDeviceSurfaceFormatsKHR{ nullptr };
    PFN_vkGetPhysicalDeviceSurfacePresentModesKHR GetPhysicalDeviceSurfacePresentModesKHR{ nullptr };
    PFN_vkGetPhysicalDevicePresentRectanglesKHR GetPhysicalDevicePresentRectanglesKHR{ nullptr };
    PFN_vkGetPhysicalDeviceDisplayPropertiesKHR GetPhysicalDeviceDisplayPropertiesKHR{ nullptr };
    PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR GetPhysicalDeviceDisplayPlanePropertiesKHR{ nullptr };
    PFN_vkGetDisplayPlaneSupportedDisplaysKHR GetDisplayPlaneSupportedDisplaysKHR{ nullptr };
    PFN_vkGetDisplayModePropertiesKHR GetDisplayModePropertiesKHR{ nullptr };
    PFN_vkCreateDisplayModeKHR CreateDisplayModeKHR{ nullptr };
    PFN_vkGetDisplayPlaneCapabilitiesKHR GetDisplayPlaneCapabilitiesKHR{ nullptr };
    PFN_vkCreateDisplayPlaneSurfaceKHR CreateDisplayPlaneSurfaceKHR{ nullptr };
    PFN_vkCreateXlibSurfaceKHR CreateXlibSurfaceKHR{ nullptr };
    PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR GetPhysicalDeviceXlibPresentationSupportKHR{ nullptr };
    PFN_vkCreateXcbSurfaceKHR CreateXcbSurfaceKHR{ nullptr };
    PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR GetPhysicalDeviceXcbPresentationSupportKHR{ nullptr };
    PFN_vkCreateWaylandSurfaceKHR CreateWaylandSurfaceKHR{ nullptr };
    PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR GetPhysicalDeviceWaylandPresentationSupportKHR{ nullptr };
    PFN_vkCreateAndroidSurfaceKHR CreateAndroidSurfaceKHR{ nullptr };
    PFN_vkCreateWin32SurfaceKHR CreateWin32SurfaceKHR{ nullptr };
    PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR GetPhysicalDeviceWin32PresentationSupportKHR{ nullptr };
    PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR GetPhysicalDeviceVideoCapabilitiesKHR{ nullptr };
    PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR GetPhysicalDeviceVideoFormatPropertiesKHR{ nullptr };
    PFN_vkGetPhysicalDeviceFeatures2KHR GetPhysicalDeviceFeatures2KHR{ nullptr };
    PFN_vkGetPhysicalDeviceProperties2KHR GetPhysicalDeviceProperties2KHR{ nullptr };
    PFN_vkGetPhysicalDeviceFormatProperties2KHR GetPhysicalDeviceFormatProperties2KHR{ nullptr };
    PFN_vkGetPhysicalDeviceImageFormatProperties2KHR GetPhysicalDeviceImageFormatProperties2KHR{ nullptr };
    PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR GetPhysicalDeviceQueueFamilyProperties2KHR{ nullptr };
    PFN_vkGetPhysicalDeviceMemoryProperties2KHR GetPhysicalDeviceMemoryProperties2KHR{ nullptr };
    PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR GetPhysicalDeviceSparseImageFormatProperties2KHR{ nullptr };
    PFN_vkEnumeratePhysicalDeviceGroupsKHR EnumeratePhysicalDeviceGroupsKHR{ nullptr };
    PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR GetPhysicalDeviceExternalBufferPropertiesKHR{ nullptr };
    PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR GetPhysicalDeviceExternalSemaphorePropertiesKHR{ nullptr };
    PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR GetPhysicalDeviceExternalFencePropertiesKHR{ nullptr };
    PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR{ nullptr };
    PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR{ nullptr };
    PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR GetPhysicalDeviceSurfaceCapabilities2KHR{ nullptr };
    PFN_vkGetPhysicalDeviceSurfaceFormats2KHR GetPhysicalDeviceSurfaceFormats2KHR{ nullptr };
    PFN_vkGetPhysicalDeviceDisplayProperties2KHR GetPhysicalDeviceDisplayProperties2KHR{ nullptr };
    PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR GetPhysicalDeviceDisplayPlaneProperties2KHR{ nullptr };
    PFN_vkGetDisplayModeProperties2KHR GetDisplayModeProperties2KHR{ nullptr };
    PFN_vkGetDisplayPlaneCapabilities2KHR GetDisplayPlaneCapabilities2KHR{ nullptr };
    PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR GetPhysicalDeviceFragmentShadingRatesKHR{ nullptr };
    PFN_vkCreateDebugReportCallbackEXT CreateDebugReportCallbackEXT{ nullptr };
    PFN_vkDestroyDebugReportCallbackEXT DestroyDebugReportCallbackEXT{ nullptr };
    PFN_vkDebugReportMessageEXT DebugReportMessageEXT{ nullptr };
    PFN_vkCreateStreamDescriptorSurfaceGGP CreateStreamDescriptorSurfaceGGP{ nullptr };
    PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV GetPhysicalDeviceExternalImageFormatPropertiesNV{ nullptr };
    PFN_vkCreateViSurfaceNN CreateViSurfaceNN{ nullptr };
    PFN_vkReleaseDisplayEXT ReleaseDisplayEXT{ nullptr };
    PFN_vkAcquireXlibDisplayEXT AcquireXlibDisplayEXT{ nullptr };
    PFN_vkGetRandROutputDisplayEXT GetRandROutputDisplayEXT{ nullptr };
    PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT GetPhysicalDeviceSurfaceCapabilities2EXT{ nullptr };
    PFN_vkCreateIOSSurfaceMVK CreateIOSSurfaceMVK{ nullptr };
    PFN_vkCreateMacOSSurfaceMVK CreateMacOSSurfaceMVK{ nullptr };
    PFN_vkSetDebugUtilsObjectNameEXT SetDebugUtilsObjectNameEXT{ nullptr };
    PFN_vkSetDebugUtilsObjectTagEXT SetDebugUtilsObjectTagEXT{ nullptr };
    PFN_vkCreateDebugUtilsMessengerEXT CreateDebugUtilsMessengerEXT{ nullptr };
    PFN_vkDestroyDebugUtilsMessengerEXT DestroyDebugUtilsMessengerEXT{ nullptr };
    PFN_vkSubmitDebugUtilsMessageEXT SubmitDebugUtilsMessageEXT{ nullptr };
    PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT GetPhysicalDeviceMultisamplePropertiesEXT{ nullptr };
    PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT GetPhysicalDeviceCalibrateableTimeDomainsEXT{ nullptr };
    PFN_vkCreateImagePipeSurfaceFUCHSIA CreateImagePipeSurfaceFUCHSIA{ nullptr };
    PFN_vkCreateMetalSurfaceEXT CreateMetalSurfaceEXT{ nullptr };
    PFN_vkGetPhysicalDeviceToolPropertiesEXT GetPhysicalDeviceToolPropertiesEXT{ nullptr };
    PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV GetPhysicalDeviceCooperativeMatrixPropertiesNV{ nullptr };
    PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV{ nullptr };
    PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT GetPhysicalDeviceSurfacePresentModes2EXT{ nullptr };
    PFN_vkCreateHeadlessSurfaceEXT CreateHeadlessSurfaceEXT{ nullptr };
    PFN_vkAcquireDrmDisplayEXT AcquireDrmDisplayEXT{ nullptr };
    PFN_vkGetDrmDisplayEXT GetDrmDisplayEXT{ nullptr };
    PFN_vkAcquireWinrtDisplayNV AcquireWinrtDisplayNV{ nullptr };
    PFN_vkGetWinrtDisplayNV GetWinrtDisplayNV{ nullptr };
    PFN_vkCreateDirectFBSurfaceEXT CreateDirectFBSurfaceEXT{ nullptr };
    PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT GetPhysicalDeviceDirectFBPresentationSupportEXT{ nullptr };
    PFN_vkCreateScreenSurfaceQNX CreateScreenSurfaceQNX{ nullptr };
    PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX GetPhysicalDeviceScreenPresentationSupportQNX{ nullptr };
    PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV GetPhysicalDeviceOpticalFlowImageFormatsNV{ nullptr };
};

struct DeviceTable
{
    PFN_vkGetDeviceProcAddr GetDeviceProcAddr{ nullptr };
    PFN_vkDestroyDevice DestroyDevice{ nullptr };
    PFN_vkGetDeviceQueue GetDeviceQueue{ nullptr };
    PFN_vkQueueSubmit QueueSubmit{ nullptr };
    PFN_vkQueueWaitIdle QueueWaitIdle{ nullptr };
    PFN_vkDeviceWaitIdle DeviceWaitIdle{ nullptr };
    PFN_vkAllocateMemory AllocateMemory{ nullptr };
    PFN_vkFreeMemory FreeMemory{ nullptr };
    PFN_vkMapMemory MapMemory{ nullptr };
    PFN_vkUnmapMemory UnmapMemory{ nullptr };
    PFN_vkFlushMappedMemoryRanges FlushMappedMemoryRanges{ nullptr };
    PFN_vkInvalidateMappedMemoryRanges InvalidateMappedMemoryRanges{ nullptr };
    PFN_vkGetDeviceMemoryCommitment GetDeviceMemoryCommitment{ nullptr };
    PFN_vkBindBufferMemory BindBufferMemory{ nullptr };
    PFN_vkBindImageMemory BindImageMemory{ nullptr };
    PFN_vkGetBufferMemoryRequirements GetBufferMemoryRequirements{ nullptr };
    PFN_vkGetImageMemoryRequirements GetImageMemoryRequirements{ nullptr };
    PFN_vkGetImageSparseMemoryRequirements GetImageSparseMemoryRequirements{ nullptr };
    PFN_vkQueueBindSparse QueueBindSparse{ nullptr };
    PFN_vkCreateFence CreateFence{ nullptr };
    PFN_vkDestroyFence DestroyFence{ nullptr };
    PFN_vkResetFences ResetFences{ nullptr };
    PFN_vkGetFenceStatus GetFenceStatus{ nullptr };
    PFN_vkWaitForFences WaitForFences{ nullptr };
    PFN_vkCreateSemaphore CreateSemaphore{ nullptr };
    PFN_vkDestroySemaphore DestroySemaphore{ nullptr };
    PFN_vkCreateEvent CreateEvent{ nullptr };
    PFN_vkDestroyEvent DestroyEvent{ nullptr };
    PFN_vkGetEventStatus GetEventStatus{ nullptr };
    PFN_vkSetEvent SetEvent{ nullptr };
    PFN_vkResetEvent ResetEvent{ nullptr };
    PFN_vkCreateQueryPool CreateQueryPool{ nullptr };
    PFN_vkDestroyQueryPool DestroyQueryPool{ nullptr };
    PFN_vkGetQueryPoolResults GetQueryPoolResults{ nullptr };
    PFN_vkCreateBuffer CreateBuffer{ nullptr };
    PFN_vkDestroyBuffer DestroyBuffer{ nullptr };
    PFN_vkCreateBufferView CreateBufferView{ nullptr };
    PFN_vkDestroyBufferView DestroyBufferView{ nullptr };
    PFN_vkCreateImage CreateImage{ nullptr };
    PFN_vkDestroyImage DestroyImage{ nullptr };
    PFN_vkGetImageSubresourceLayout GetImageSubresourceLayout{ nullptr };
    PFN_vkCreateImageView CreateImageView{ nullptr };
    PFN_vkDestroyImageView DestroyImageView{ nullptr };
    PFN_vkCreateShaderModule CreateShaderModule{ nullptr };
    PFN_vkDestroyShaderModule DestroyShaderModule{ nullptr };
    PFN_vkCreatePipelineCache CreatePipelineCache{ nullptr };
    PFN_vkDestroyPipelineCache DestroyPipelineCache{ nullptr };
    PFN_vkGetPipelineCacheData GetPipelineCacheData{ nullptr };
    PFN_vkMergePipelineCaches MergePipelineCaches{ nullptr };
    PFN_vkCreateGraphicsPipelines CreateGraphicsPipelines{ nullptr };
    PFN_vkCreateComputePipelines CreateComputePipelines{ nullptr };
    PFN_vkDestroyPipeline DestroyPipeline{ nullptr };
    PFN_vkCreatePipelineLayout CreatePipelineLayout{ nullptr };
    PFN_vkDestroyPipelineLayout DestroyPipelineLayout{ nullptr };
    PFN_vkCreateSampler CreateSampler{ nullptr };
    PFN_vkDestroySampler DestroySampler{ nullptr };
    PFN_vkCreateDescriptorSetLayout CreateDescriptorSetLayout{ nullptr };
    PFN_vkDestroyDescriptorSetLayout DestroyDescriptorSetLayout{ nullptr };
    PFN_vkCreateDescriptorPool CreateDescriptorPool{ nullptr };
    PFN_vkDestroyDescriptorPool DestroyDescriptorPool{ nullptr };
    PFN_vkResetDescriptorPool ResetDescriptorPool{ nullptr };
    PFN_vkAllocateDescriptorSets AllocateDescriptorSets{ nullptr };
    PFN_vkFreeDescriptorSets FreeDescriptorSets{ nullptr };
    PFN_vkUpdateDescriptorSets UpdateDescriptorSets{ nullptr };
    PFN_vkCreateFramebuffer CreateFramebuffer{ nullptr };
    PFN_vkDestroyFramebuffer DestroyFramebuffer{ nullptr };
    PFN_vkCreateRenderPass CreateRenderPass{ nullptr };
    PFN_vkDestroyRenderPass DestroyRenderPass{ nullptr };
    PFN_vkGetRenderAreaGranularity GetRenderAreaGranularity{ nullptr };
    PFN_vkCreateCommandPool CreateCommandPool{ nullptr };
    PFN_vkDestroyCommandPool DestroyCommandPool{ nullptr };
    PFN_vkResetCommandPool ResetCommandPool{ nullptr };
    PFN_vkAllocateCommandBuffers AllocateCommandBuffers{ nullptr };
    PFN_vkFreeCommandBuffers FreeCommandBuffers{ nullptr };
    PFN_vkBeginCommandBuffer BeginCommandBuffer{ nullptr };
    PFN_vkEndCommandBuffer EndCommandBuffer{ nullptr };
    PFN_vkResetCommandBuffer ResetCommandBuffer{ nullptr };
    PFN_vkCmdBindPipeline CmdBindPipeline{ nullptr };
    PFN_vkCmdSetViewport CmdSetViewport{ nullptr };
    PFN_vkCmdSetScissor CmdSetScissor{ nullptr };
    PFN_vkCmdSetLineWidth CmdSetLineWidth{ nullptr };
    PFN_vkCmdSetDepthBias CmdSetDepthBias{ nullptr };
    PFN_vkCmdSetBlendConstants CmdSetBlendConstants{ nullptr };
    PFN_vkCmdSetDepthBounds CmdSetDepthBounds{ nullptr };
    PFN_vkCmdSetStencilCompareMask CmdSetStencilCompareMask{ nullptr };
    PFN_vkCmdSetStencilWriteMask CmdSetStencilWriteMask{ nullptr };
    PFN_vkCmdSetStencilReference CmdSetStencilReference{ nullptr };
    PFN_vkCmdBindDescriptorSets CmdBindDescriptorSets{ nullptr };
    PFN_vkCmdBindIndexBuffer CmdBindIndexBuffer{ nullptr };
    PFN_vkCmdBindVertexBuffers CmdBindVertexBuffers{ nullptr };
    PFN_vkCmdDraw CmdDraw{ nullptr };
    PFN_vkCmdDrawIndexed CmdDrawIndexed{ nullptr };
    PFN_vkCmdDrawIndirect CmdDrawIndirect{ nullptr };
    PFN_vkCmdDrawIndexedIndirect CmdDrawIndexedIndirect{ nullptr };
    PFN_vkCmdDispatch CmdDispatch{ nullptr };
    PFN_vkCmdDispatchIndirect CmdDispatchIndirect{ nullptr };
    PFN_vkCmdCopyBuffer CmdCopyBuffer{ nullptr };
    PFN_vkCmdCopyImage CmdCopyImage{ nullptr };
    PFN_vkCmdBlitImage CmdBlitImage{ nullptr };
    PFN_vkCmdCopyBufferToImage CmdCopyBufferToImage{ nullptr };
    PFN_vkCmdCopyImageToBuffer CmdCopyImageToBuffer{ nullptr };
    PFN_vkCmdUpdateBuffer CmdUpdateBuffer{ nullptr };
    PFN_vkCmdFillBuffer CmdFillBuffer{ nullptr };
    PFN_vkCmdClearColorImage CmdClearColorImage{ nullptr };
    PFN_vkCmdClearDepthStencilImage CmdClearDepthStencilImage{ nullptr };
    PFN_vkCmdClearAttachments CmdClearAttachments{ nullptr };
    PFN_vkCmdResolveImage CmdResolveImage{ nullptr };
    PFN_vkCmdSetEvent CmdSetEvent{ nullptr };
    PFN_vkCmdResetEvent CmdResetEvent{ nullptr };
    PFN_vkCmdWaitEvents CmdWaitEvents{ nullptr };
    PFN_vkCmdPipelineBarrier CmdPipelineBarrier{ nullptr };
    PFN_vkCmdBeginQuery CmdBeginQuery{ nullptr };
    PFN_vkCmdEndQuery CmdEndQuery{ nullptr };
    PFN_vkCmdResetQueryPool CmdResetQueryPool{ nullptr };
    PFN_vkCmdWriteTimestamp CmdWriteTimestamp{ nullptr };
    PFN_vkCmdCopyQueryPoolResults CmdCopyQueryPoolResults{ nullptr };
    PFN_vkCmdPushConstants CmdPushConstants{ nullptr };
    PFN_vkCmdBeginRenderPass CmdBeginRenderPass{ nullptr };
    PFN_vkCmdNextSubpass CmdNextSubpass{ nullptr };
    PFN_vkCmdEndRenderPass CmdEndRenderPass{ nullptr };
    PFN_vkCmdExecuteCommands CmdExecuteCommands{ nullptr };
    PFN_vkBindBufferMemory2 BindBufferMemory2{ nullptr };
    PFN_vkBindImageMemory2 BindImageMemory2{ nullptr };
    PFN_vkGetDeviceGroupPeerMemoryFeatures GetDeviceGroupPeerMemoryFeatures{ nullptr };
    PFN_vkCmdSetDeviceMask CmdSetDeviceMask{ nullptr };
    PFN_vkCmdDispatchBase CmdDispatchBase{ nullptr };
    PFN_vkGetImageMemoryRequirements2 GetImageMemoryRequirements2{ nullptr };
    PFN_vkGetBufferMemoryRequirements2 GetBufferMemoryRequirements2{ nullptr };
    PFN_vkGetImageSparseMemoryRequirements2 GetImageSparseMemoryRequirements2{ nullptr };
    PFN_vkTrimCommandPool TrimCommandPool{ nullptr };
    PFN_vkGetDeviceQueue2 GetDeviceQueue2{ nullptr };
    PFN_vkCreateSamplerYcbcrConversion CreateSamplerYcbcrConversion{ nullptr };
    PFN_vkDestroySamplerYcbcrConversion DestroySamplerYcbcrConversion{ nullptr };
    PFN_vkCreateDescriptorUpdateTemplate CreateDescriptorUpdateTemplate{ nullptr };
    PFN_vkDestroyDescriptorUpdateTemplate DestroyDescriptorUpdateTemplate{ nullptr };
    PFN_vkUpdateDescriptorSetWithTemplate UpdateDescriptorSetWithTemplate{ nullptr };
    PFN_vkGetDescriptorSetLayoutSupport GetDescriptorSetLayoutSupport{ nullptr };
    PFN_vkCmdDrawIndirectCount CmdDrawIndirectCount{ nullptr };
    PFN_vkCmdDrawIndexedIndirectCount CmdDrawIndexedIndirectCount{ nullptr };
    PFN_vkCreateRenderPass2 CreateRenderPass2{ nullptr };
    PFN_vkCmdBeginRenderPass2 CmdBeginRenderPass2{ nullptr };
    PFN_vkCmdNextSubpass2 CmdNextSubpass2{ nullptr };
    PFN_vkCmdEndRenderPass2 CmdEndRenderPass2{ nullptr };
    PFN_vkResetQueryPool ResetQueryPool{ nullptr };
    PFN_vkGetSemaphoreCounterValue GetSemaphoreCounterValue{ nullptr };
    PFN_vkWaitSemaphores WaitSemaphores{ nullptr };
    PFN_vkSignalSemaphore SignalSemaphore{ nullptr };
    PFN_vkGetBufferDeviceAddress GetBufferDeviceAddress{ nullptr };
    PFN_vkGetBufferOpaqueCaptureAddress GetBufferOpaqueCaptureAddress{ nullptr };
    PFN_vkGetDeviceMemoryOpaqueCaptureAddress GetDeviceMemoryOpaqueCaptureAddress{ nullptr };
    PFN_vkCreatePrivateDataSlot CreatePrivateDataSlot{ nullptr };
    PFN_vkDestroyPrivateDataSlot DestroyPrivateDataSlot{ nullptr };
    PFN_vkSetPrivateData SetPrivateData{ nullptr };
    PFN_vkGetPrivateData GetPrivateData{ nullptr };
    PFN_vkCmdSetEvent2 CmdSetEvent2{ nullptr };
    PFN_vkCmdResetEvent2 CmdResetEvent2{ nullptr };
    PFN_vkCmdWaitEvents2 CmdWaitEvents2{ nullptr };
    PFN_vkCmdPipelineBarrier2 CmdPipelineBarrier2{ nullptr };
    PFN_vkCmdWriteTimestamp2 CmdWriteTimestamp2{ nullptr };
    PFN_vkQueueSubmit2 QueueSubmit2{ nullptr };
    PFN_vkCmdCopyBuffer2 CmdCopyBuffer2{ nullptr };
    PFN_vkCmdCopyImage2 CmdCopyImage2{ nullptr };
    PFN_vkCmdCopyBufferToImage2 CmdCopyBufferToImage2{ nullptr };
    PFN_vkCmdCopyImageToBuffer2 CmdCopyImageToBuffer2{ nullptr };
    PFN_vkCmdBlitImage2 CmdBlitImage2{ nullptr };
    PFN_vkCmdResolveImage2 CmdResolveImage2{ nullptr };
    PFN_vkCmdBeginRendering CmdBeginRendering{ nullptr };
    PFN_vkCmdEndRendering CmdEndRendering{ nullptr };
    PFN_vkCmdSetCullMode CmdSetCullMode{ nullptr };
    PFN_vkCmdSetFrontFace CmdSetFrontFace{ nullptr };
    PFN_vkCmdSetPrimitiveTopology CmdSetPrimitiveTopology{ nullptr };
    PFN_vkCmdSetViewportWithCount CmdSetViewportWithCount{ nullptr };
    PFN_vkCmdSetScissorWithCount CmdSetScissorWithCount{ nullptr };
    PFN_vkCmdBindVertexBuffers2 CmdBindVertexBuffers2{ nullptr };
    PFN_vkCmdSetDepthTestEnable CmdSetDepthTestEnable{ nullptr };
    PFN_vkCmdSetDepthWriteEnable CmdSetDepthWriteEnable{ nullptr };
    PFN_vkCmdSetDepthCompareOp CmdSetDepthCompareOp{ nullptr };
    PFN_vkCmdSetDepthBoundsTestEnable CmdSetDepthBoundsTestEnable{ nullptr };
    PFN_vkCmdSetStencilTestEnable CmdSetStencilTestEnable{ nullptr };
    PFN_vkCmdSetStencilOp CmdSetStencilOp{ nullptr };
    PFN_vkCmdSetRasterizerDiscardEnable CmdSetRasterizerDiscardEnable{ nullptr };
    PFN_vkCmdSetDepthBiasEnable CmdSetDepthBiasEnable{ nullptr };
    PFN_vkCmdSetPrimitiveRestartEnable CmdSetPrimitiveRestartEnable{ nullptr };
    PFN_vkGetDeviceBufferMemoryRequirements GetDeviceBufferMemoryRequirements{ nullptr };
    PFN_vkGetDeviceImageMemoryRequirements GetDeviceImageMemoryRequirements{ nullptr };
    PFN_vkGetDeviceImageSparseMemoryRequirements GetDeviceImageSparseMemoryRequirements{ nullptr };
    PFN_vkCreateSwapchainKHR CreateSwapchainKHR{ nullptr };
    PFN_vkDestroySwapchainKHR DestroySwapchainKHR{ nullptr };
    PFN_vkGetSwapchainImagesKHR GetSwapchainImagesKHR{ nullptr };
    PFN_vkAcquireNextImageKHR AcquireNextImageKHR{ nullptr };
    PFN_vkQueuePresentKHR QueuePresentKHR{ nullptr };
    PFN_vkGetDeviceGroupPresentCapabilitiesKHR GetDeviceGroupPresentCapabilitiesKHR{ nullptr };
    PFN_vkGetDeviceGroupSurfacePresentModesKHR GetDeviceGroupSurfacePresentModesKHR{ nullptr };
    PFN_vkAcquireNextImage2KHR AcquireNextImage2KHR{ nullptr };
    PFN_vkCreateSharedSwapchainsKHR CreateSharedSwapchainsKHR{ nullptr };
    PFN_vkCreateVideoSessionKHR CreateVideoSessionKHR{ nullptr };
    PFN_vkDestroyVideoSessionKHR DestroyVideoSessionKHR{ nullptr };
    PFN_vkGetVideoSessionMemoryRequirementsKHR GetVideoSessionMemoryRequirementsKHR{ nullptr };
    PFN_vkBindVideoSessionMemoryKHR BindVideoSessionMemoryKHR{ nullptr };
    PFN_vkCreateVideoSessionParametersKHR CreateVideoSessionParametersKHR{ nullptr };
    PFN_vkUpdateVideoSessionParametersKHR UpdateVideoSessionParametersKHR{ nullptr };
    PFN_vkDestroyVideoSessionParametersKHR DestroyVideoSessionParametersKHR{ nullptr };
    PFN_vkCmdBeginVideoCodingKHR CmdBeginVideoCodingKHR{ nullptr };
    PFN_vkCmdEndVideoCodingKHR CmdEndVideoCodingKHR{ nullptr };
    PFN_vkCmdControlVideoCodingKHR CmdControlVideoCodingKHR{ nullptr };
    PFN_vkCmdDecodeVideoKHR CmdDecodeVideoKHR{ nullptr };
    PFN_vkCmdBeginRenderingKHR CmdBeginRenderingKHR{ nullptr };
    PFN_vkCmdEndRenderingKHR CmdEndRenderingKHR{ nullptr };
    PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR GetDeviceGroupPeerMemoryFeaturesKHR{ nullptr };
    PFN_vkCmdSetDeviceMaskKHR CmdSetDeviceMaskKHR{ nullptr };
    PFN_vkCmdDispatchBaseKHR CmdDispatchBaseKHR{ nullptr };
    PFN_vkTrimCommandPoolKHR TrimCommandPoolKHR{ nullptr };
    PFN_vkGetMemoryWin32HandleKHR GetMemoryWin32HandleKHR{ nullptr };
    PFN_vkGetMemoryWin32HandlePropertiesKHR GetMemoryWin32HandlePropertiesKHR{ nullptr };
    PFN_vkGetMemoryFdKHR GetMemoryFdKHR{ nullptr };
    PFN_vkGetMemoryFdPropertiesKHR GetMemoryFdPropertiesKHR{ nullptr };
    PFN_vkImportSemaphoreWin32HandleKHR ImportSemaphoreWin32HandleKHR{ nullptr };
    PFN_vkGetSemaphoreWin32HandleKHR GetSemaphoreWin32HandleKHR{ nullptr };
    PFN_vkImportSemaphoreFdKHR ImportSemaphoreFdKHR{ nullptr };
    PFN_vkGetSemaphoreFdKHR GetSemaphoreFdKHR{ nullptr };
    PFN_vkCmdPushDescriptorSetKHR CmdPushDescriptorSetKHR{ nullptr };
    PFN_vkCmdPushDescriptorSetWithTemplateKHR CmdPushDescriptorSetWithTemplateKHR{ nullptr };
    PFN_vkCreateDescriptorUpdateTemplateKHR CreateDescriptorUpdateTemplateKHR{ nullptr };
    PFN_vkDestroyDescriptorUpdateTemplateKHR DestroyDescriptorUpdateTemplateKHR{ nullptr };
    PFN_vkUpdateDescriptorSetWithTemplateKHR UpdateDescriptorSetWithTemplateKHR{ nullptr };
    PFN_vkCreateRenderPass2KHR CreateRenderPass2KHR{ nullptr };
    PFN_vkCmdBeginRenderPass2KHR CmdBeginRenderPass2KHR{ nullptr };
    PFN_vkCmdNextSubpass2KHR CmdNextSubpass2KHR{ nullptr };
    PFN_vkCmdEndRenderPass2KHR CmdEndRenderPass2KHR{ nullptr };
    PFN_vkGetSwapchainStatusKHR GetSwapchainStatusKHR{ nullptr };
    PFN_vkImportFenceWin32HandleKHR ImportFenceWin32HandleKHR{ nullptr };
    PFN_vkGetFenceWin32HandleKHR GetFenceWin32HandleKHR{ nullptr };
    PFN_vkImportFenceFdKHR ImportFenceFdKHR{ nullptr };
    PFN_vkGetFenceFdKHR GetFenceFdKHR{ nullptr };
    PFN_vkAcquireProfilingLockKHR AcquireProfilingLockKHR{ nullptr };
    PFN_vkReleaseProfilingLockKHR ReleaseProfilingLockKHR{ nullptr };
    PFN_vkGetImageMemoryRequirements2KHR GetImageMemoryRequirements2KHR{ nullptr };
    PFN_vkGetBufferMemoryRequirements2KHR GetBufferMemoryRequirements2KHR{ nullptr };
    PFN_vkGetImageSparseMemoryRequirements2KHR GetImageSparseMemoryRequirements2KHR{ nullptr };
    PFN_vkCreateSamplerYcbcrConversionKHR CreateSamplerYcbcrConversionKHR{ nullptr };
    PFN_vkDestroySamplerYcbcrConversionKHR DestroySamplerYcbcrConversionKHR{ nullptr };
    PFN_vkBindBufferMemory2KHR BindBufferMemory2KHR{ nullptr };
    PFN_vkBindImageMemory2KHR BindImageMemory2KHR{ nullptr };
    PFN_vkGetDescriptorSetLayoutSupportKHR GetDescriptorSetLayoutSupportKHR{ nullptr };
    PFN_vkCmdDrawIndirectCountKHR CmdDrawIndirectCountKHR{ nullptr };
    PFN_vkCmdDrawIndexedIndirectCountKHR CmdDrawIndexedIndirectCountKHR{ nullptr };
    PFN_vkGetSemaphoreCounterValueKHR GetSemaphoreCounterValueKHR{ nullptr };
    PFN_vkWaitSemaphoresKHR WaitSemaphoresKHR{ nullptr };
    PFN_vkSignalSemaphoreKHR SignalSemaphoreKHR{ nullptr };
    PFN_vkCmdSetFragmentShadingRateKHR CmdSetFragmentShadingRateKHR{ nullptr };
    PFN_vkWaitForPresentKHR WaitForPresentKHR{ nullptr };
    PFN_vkGetBufferDeviceAddressKHR GetBufferDeviceAddressKHR{ nullptr };
    PFN_vkGetBufferOpaqueCaptureAddressKHR GetBufferOpaqueCaptureAddressKHR{ nullptr };
    PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR GetDeviceMemoryOpaqueCaptureAddressKHR{ nullptr };
    PFN_vkCreateDeferredOperationKHR CreateDeferredOperationKHR{ nullptr };
    PFN_vkDestroyDeferredOperationKHR DestroyDeferredOperationKHR{ nullptr };
    PFN_vkGetDeferredOperationMaxConcurrencyKHR GetDeferredOperationMaxConcurrencyKHR{ nullptr };
    PFN_vkGetDeferredOperationResultKHR GetDeferredOperationResultKHR{ nullptr };
    PFN_vkDeferredOperationJoinKHR DeferredOperationJoinKHR{ nullptr };
    PFN_vkGetPipelineExecutablePropertiesKHR GetPipelineExecutablePropertiesKHR{ nullptr };
    PFN_vkGetPipelineExecutableStatisticsKHR GetPipelineExecutableStatisticsKHR{ nullptr };
    PFN_vkGetPipelineExecutableInternalRepresentationsKHR GetPipelineExecutableInternalRepresentationsKHR{ nullptr };
    PFN_vkMapMemory2KHR MapMemory2KHR{ nullptr };
    PFN_vkUnmapMemory2KHR UnmapMemory2KHR{ nullptr };
    PFN_vkCmdEncodeVideoKHR CmdEncodeVideoKHR{ nullptr };
    PFN_vkCmdSetEvent2KHR CmdSetEvent2KHR{ nullptr };
    PFN_vkCmdResetEvent2KHR CmdResetEvent2KHR{ nullptr };
    PFN_vkCmdWaitEvents2KHR CmdWaitEvents2KHR{ nullptr };
    PFN_vkCmdPipelineBarrier2KHR CmdPipelineBarrier2KHR{ nullptr };
    PFN_vkCmdWriteTimestamp2KHR CmdWriteTimestamp2KHR{ nullptr };
    PFN_vkQueueSubmit2KHR QueueSubmit2KHR{ nullptr };
    PFN_vkCmdWriteBufferMarker2AMD CmdWriteBufferMarker2AMD{ nullptr };
    PFN_vkGetQueueCheckpointData2NV GetQueueCheckpointData2NV{ nullptr };
    PFN_vkCmdCopyBuffer2KHR CmdCopyBuffer2KHR{ nullptr };
    PFN_vkCmdCopyImage2KHR CmdCopyImage2KHR{ nullptr };
    PFN_vkCmdCopyBufferToImage2KHR CmdCopyBufferToImage2KHR{ nullptr };
    PFN_vkCmdCopyImageToBuffer2KHR CmdCopyImageToBuffer2KHR{ nullptr };
    PFN_vkCmdBlitImage2KHR CmdBlitImage2KHR{ nullptr };
    PFN_vkCmdResolveImage2KHR CmdResolveImage2KHR{ nullptr };
    PFN_vkCmdTraceRaysIndirect2KHR CmdTraceRaysIndirect2KHR{ nullptr };
    PFN_vkGetDeviceBufferMemoryRequirementsKHR GetDeviceBufferMemoryRequirementsKHR{ nullptr };
    PFN_vkGetDeviceImageMemoryRequirementsKHR GetDeviceImageMemoryRequirementsKHR{ nullptr };
    PFN_vkGetDeviceImageSparseMemoryRequirementsKHR GetDeviceImageSparseMemoryRequirementsKHR{ nullptr };
    PFN_vkDebugMarkerSetObjectTagEXT DebugMarkerSetObjectTagEXT{ nullptr };
    PFN_vkDebugMarkerSetObjectNameEXT DebugMarkerSetObjectNameEXT{ nullptr };
    PFN_vkCmdDebugMarkerBeginEXT CmdDebugMarkerBeginEXT{ nullptr };
    PFN_vkCmdDebugMarkerEndEXT CmdDebugMarkerEndEXT{ nullptr };
    PFN_vkCmdDebugMarkerInsertEXT CmdDebugMarkerInsertEXT{ nullptr };
    PFN_vkCmdBindTransformFeedbackBuffersEXT CmdBindTransformFeedbackBuffersEXT{ nullptr };
    PFN_vkCmdBeginTransformFeedbackEXT CmdBeginTransformFeedbackEXT{ nullptr };
    PFN_vkCmdEndTransformFeedbackEXT CmdEndTransformFeedbackEXT{ nullptr };
    PFN_vkCmdBeginQueryIndexedEXT CmdBeginQueryIndexedEXT{ nullptr };
    PFN_vkCmdEndQueryIndexedEXT CmdEndQueryIndexedEXT{ nullptr };
    PFN_vkCmdDrawIndirectByteCountEXT CmdDrawIndirectByteCountEXT{ nullptr };
    PFN_vkGetImageViewHandleNVX GetImageViewHandleNVX{ nullptr };
    PFN_vkGetImageViewAddressNVX GetImageViewAddressNVX{ nullptr };
    PFN_vkCmdDrawIndirectCountAMD CmdDrawIndirectCountAMD{ nullptr };
    PFN_vkCmdDrawIndexedIndirectCountAMD CmdDrawIndexedIndirectCountAMD{ nullptr };
    PFN_vkGetShaderInfoAMD GetShaderInfoAMD{ nullptr };
    PFN_vkGetMemoryWin32HandleNV GetMemoryWin32HandleNV{ nullptr };
    PFN_vkCmdBeginConditionalRenderingEXT CmdBeginConditionalRenderingEXT{ nullptr };
    PFN_vkCmdEndConditionalRenderingEXT CmdEndConditionalRenderingEXT{ nullptr };
    PFN_vkCmdSetViewportWScalingNV CmdSetViewportWScalingNV{ nullptr };
    PFN_vkDisplayPowerControlEXT DisplayPowerControlEXT{ nullptr };
    PFN_vkRegisterDeviceEventEXT RegisterDeviceEventEXT{ nullptr };
    PFN_vkRegisterDisplayEventEXT RegisterDisplayEventEXT{ nullptr };
    PFN_vkGetSwapchainCounterEXT GetSwapchainCounterEXT{ nullptr };
    PFN_vkGetRefreshCycleDurationGOOGLE GetRefreshCycleDurationGOOGLE{ nullptr };
    PFN_vkGetPastPresentationTimingGOOGLE GetPastPresentationTimingGOOGLE{ nullptr };
    PFN_vkCmdSetDiscardRectangleEXT CmdSetDiscardRectangleEXT{ nullptr };
    PFN_vkCmdSetDiscardRectangleEnableEXT CmdSetDiscardRectangleEnableEXT{ nullptr };
    PFN_vkCmdSetDiscardRectangleModeEXT CmdSetDiscardRectangleModeEXT{ nullptr };
    PFN_vkSetHdrMetadataEXT SetHdrMetadataEXT{ nullptr };
    PFN_vkQueueBeginDebugUtilsLabelEXT QueueBeginDebugUtilsLabelEXT{ nullptr };
    PFN_vkQueueEndDebugUtilsLabelEXT QueueEndDebugUtilsLabelEXT{ nullptr };
    PFN_vkQueueInsertDebugUtilsLabelEXT QueueInsertDebugUtilsLabelEXT{ nullptr };
    PFN_vkCmdBeginDebugUtilsLabelEXT CmdBeginDebugUtilsLabelEXT{ nullptr };
    PFN_vkCmdEndDebugUtilsLabelEXT CmdEndDebugUtilsLabelEXT{ nullptr };
    PFN_vkCmdInsertDebugUtilsLabelEXT CmdInsertDebugUtilsLabelEXT{ nullptr };
    PFN_vkGetAndroidHardwareBufferPropertiesANDROID GetAndroidHardwareBufferPropertiesANDROID{ nullptr };
    PFN_vkGetMemoryAndroidHardwareBufferANDROID GetMemoryAndroidHardwareBufferANDROID{ nullptr };
    PFN_vkCmdSetSampleLocationsEXT CmdSetSampleLocationsEXT{ nullptr };
    PFN_vkGetImageDrmFormatModifierPropertiesEXT GetImageDrmFormatModifierPropertiesEXT{ nullptr };
    PFN_vkCreateValidationCacheEXT CreateValidationCacheEXT{ nullptr };
    PFN_vkDestroyValidationCacheEXT DestroyValidationCacheEXT{ nullptr };
    PFN_vkMergeValidationCachesEXT MergeValidationCachesEXT{ nullptr };
    PFN_vkGetValidationCacheDataEXT GetValidationCacheDataEXT{ nullptr };
    PFN_vkCmdBindShadingRateImageNV CmdBindShadingRateImageNV{ nullptr };
    PFN_vkCmdSetViewportShadingRatePaletteNV CmdSetViewportShadingRatePaletteNV{ nullptr };
    PFN_vkCmdSetCoarseSampleOrderNV CmdSetCoarseSampleOrderNV{ nullptr };
    PFN_vkCreateAccelerationStructureNV CreateAccelerationStructureNV{ nullptr };
    PFN_vkDestroyAccelerationStructureNV DestroyAccelerationStructureNV{ nullptr };
    PFN_vkGetAccelerationStructureMemoryRequirementsNV GetAccelerationStructureMemoryRequirementsNV{ nullptr };
    PFN_vkBindAccelerationStructureMemoryNV BindAccelerationStructureMemoryNV{ nullptr };
    PFN_vkCmdBuildAccelerationStructureNV CmdBuildAccelerationStructureNV{ nullptr };
    PFN_vkCmdCopyAccelerationStructureNV CmdCopyAccelerationStructureNV{ nullptr };
    PFN_vkCmdTraceRaysNV CmdTraceRaysNV{ nullptr };
    PFN_vkCreateRayTracingPipelinesNV CreateRayTracingPipelinesNV{ nullptr };
    PFN_vkGetRayTracingShaderGroupHandlesKHR GetRayTracingShaderGroupHandlesKHR{ nullptr };
    PFN_vkGetRayTracingShaderGroupHandlesNV GetRayTracingShaderGroupHandlesNV{ nullptr };
    PFN_vkGetAccelerationStructureHandleNV GetAccelerationStructureHandleNV{ nullptr };
    PFN_vkCmdWriteAccelerationStructuresPropertiesNV CmdWriteAccelerationStructuresPropertiesNV{ nullptr };
    PFN_vkCompileDeferredNV CompileDeferredNV{ nullptr };
    PFN_vkGetMemoryHostPointerPropertiesEXT GetMemoryHostPointerPropertiesEXT{ nullptr };
    PFN_vkCmdWriteBufferMarkerAMD CmdWriteBufferMarkerAMD{ nullptr };
    PFN_vkGetCalibratedTimestampsEXT GetCalibratedTimestampsEXT{ nullptr };
    PFN_vkCmdDrawMeshTasksNV CmdDrawMeshTasksNV{ nullptr };
    PFN_vkCmdDrawMeshTasksIndirectNV CmdDrawMeshTasksIndirectNV{ nullptr };
    PFN_vkCmdDrawMeshTasksIndirectCountNV CmdDrawMeshTasksIndirectCountNV{ nullptr };
    PFN_vkCmdSetExclusiveScissorEnableNV CmdSetExclusiveScissorEnableNV{ nullptr };
    PFN_vkCmdSetExclusiveScissorNV CmdSetExclusiveScissorNV{ nullptr };
    PFN_vkCmdSetCheckpointNV CmdSetCheckpointNV{ nullptr };
    PFN_vkGetQueueCheckpointDataNV GetQueueCheckpointDataNV{ nullptr };
    PFN_vkInitializePerformanceApiINTEL InitializePerformanceApiINTEL{ nullptr };
    PFN_vkUninitializePerformanceApiINTEL UninitializePerformanceApiINTEL{ nullptr };
    PFN_vkCmdSetPerformanceMarkerINTEL CmdSetPerformanceMarkerINTEL{ nullptr };
    PFN_vkCmdSetPerformanceStreamMarkerINTEL CmdSetPerformanceStreamMarkerINTEL{ nullptr };
    PFN_vkCmdSetPerformanceOverrideINTEL CmdSetPerformanceOverrideINTEL{ nullptr };
    PFN_vkAcquirePerformanceConfigurationINTEL AcquirePerformanceConfigurationINTEL{ nullptr };
    PFN_vkReleasePerformanceConfigurationINTEL ReleasePerformanceConfigurationINTEL{ nullptr };
    PFN_vkQueueSetPerformanceConfigurationINTEL QueueSetPerformanceConfigurationINTEL{ nullptr };
    PFN_vkGetPerformanceParameterINTEL GetPerformanceParameterINTEL{ nullptr };
    PFN_vkSetLocalDimmingAMD SetLocalDimmingAMD{ nullptr };
    PFN_vkGetBufferDeviceAddressEXT GetBufferDeviceAddressEXT{ nullptr };
    PFN_vkAcquireFullScreenExclusiveModeEXT AcquireFullScreenExclusiveModeEXT{ nullptr };
    PFN_vkReleaseFullScreenExclusiveModeEXT ReleaseFullScreenExclusiveModeEXT{ nullptr };
    PFN_vkGetDeviceGroupSurfacePresentModes2EXT GetDeviceGroupSurfacePresentModes2EXT{ nullptr };
    PFN_vkCmdSetLineStippleEXT CmdSetLineStippleEXT{ nullptr };
    PFN_vkResetQueryPoolEXT ResetQueryPoolEXT{ nullptr };
    PFN_vkCmdSetCullModeEXT CmdSetCullModeEXT{ nullptr };
    PFN_vkCmdSetFrontFaceEXT CmdSetFrontFaceEXT{ nullptr };
    PFN_vkCmdSetPrimitiveTopologyEXT CmdSetPrimitiveTopologyEXT{ nullptr };
    PFN_vkCmdSetViewportWithCountEXT CmdSetViewportWithCountEXT{ nullptr };
    PFN_vkCmdSetScissorWithCountEXT CmdSetScissorWithCountEXT{ nullptr };
    PFN_vkCmdBindVertexBuffers2EXT CmdBindVertexBuffers2EXT{ nullptr };
    PFN_vkCmdSetDepthTestEnableEXT CmdSetDepthTestEnableEXT{ nullptr };
    PFN_vkCmdSetDepthWriteEnableEXT CmdSetDepthWriteEnableEXT{ nullptr };
    PFN_vkCmdSetDepthCompareOpEXT CmdSetDepthCompareOpEXT{ nullptr };
    PFN_vkCmdSetDepthBoundsTestEnableEXT CmdSetDepthBoundsTestEnableEXT{ nullptr };
    PFN_vkCmdSetStencilTestEnableEXT CmdSetStencilTestEnableEXT{ nullptr };
    PFN_vkCmdSetStencilOpEXT CmdSetStencilOpEXT{ nullptr };
    PFN_vkReleaseSwapchainImagesEXT ReleaseSwapchainImagesEXT{ nullptr };
    PFN_vkGetGeneratedCommandsMemoryRequirementsNV GetGeneratedCommandsMemoryRequirementsNV{ nullptr };
    PFN_vkCmdPreprocessGeneratedCommandsNV CmdPreprocessGeneratedCommandsNV{ nullptr };
    PFN_vkCmdExecuteGeneratedCommandsNV CmdExecuteGeneratedCommandsNV{ nullptr };
    PFN_vkCmdBindPipelineShaderGroupNV CmdBindPipelineShaderGroupNV{ nullptr };
    PFN_vkCreateIndirectCommandsLayoutNV CreateIndirectCommandsLayoutNV{ nullptr };
    PFN_vkDestroyIndirectCommandsLayoutNV DestroyIndirectCommandsLayoutNV{ nullptr };
    PFN_vkCreatePrivateDataSlotEXT CreatePrivateDataSlotEXT{ nullptr };
    PFN_vkDestroyPrivateDataSlotEXT DestroyPrivateDataSlotEXT{ nullptr };
    PFN_vkSetPrivateDataEXT SetPrivateDataEXT{ nullptr };
    PFN_vkGetPrivateDataEXT GetPrivateDataEXT{ nullptr };
    PFN_vkCmdSetFragmentShadingRateEnumNV CmdSetFragmentShadingRateEnumNV{ nullptr };
    PFN_vkGetImageSubresourceLayout2EXT GetImageSubresourceLayout2EXT{ nullptr };
    PFN_vkGetDeviceFaultInfoEXT GetDeviceFaultInfoEXT{ nullptr };
    PFN_vkCmdSetVertexInputEXT CmdSetVertexInputEXT{ nullptr };
    PFN_vkGetMemoryZirconHandleFUCHSIA GetMemoryZirconHandleFUCHSIA{ nullptr };
    PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA GetMemoryZirconHandlePropertiesFUCHSIA{ nullptr };
    PFN_vkImportSemaphoreZirconHandleFUCHSIA ImportSemaphoreZirconHandleFUCHSIA{ nullptr };
    PFN_vkGetSemaphoreZirconHandleFUCHSIA GetSemaphoreZirconHandleFUCHSIA{ nullptr };
    PFN_vkCmdBindInvocationMaskHUAWEI CmdBindInvocationMaskHUAWEI{ nullptr };
    PFN_vkGetMemoryRemoteAddressNV GetMemoryRemoteAddressNV{ nullptr };
    PFN_vkCmdSetPatchControlPointsEXT CmdSetPatchControlPointsEXT{ nullptr };
    PFN_vkCmdSetRasterizerDiscardEnableEXT CmdSetRasterizerDiscardEnableEXT{ nullptr };
    PFN_vkCmdSetDepthBiasEnableEXT CmdSetDepthBiasEnableEXT{ nullptr };
    PFN_vkCmdSetLogicOpEXT CmdSetLogicOpEXT{ nullptr };
    PFN_vkCmdSetPrimitiveRestartEnableEXT CmdSetPrimitiveRestartEnableEXT{ nullptr };
    PFN_vkCmdSetColorWriteEnableEXT CmdSetColorWriteEnableEXT{ nullptr };
    PFN_vkCmdDrawMultiEXT CmdDrawMultiEXT{ nullptr };
    PFN_vkCmdDrawMultiIndexedEXT CmdDrawMultiIndexedEXT{ nullptr };
    PFN_vkCreateMicromapEXT CreateMicromapEXT{ nullptr };
    PFN_vkDestroyMicromapEXT DestroyMicromapEXT{ nullptr };
    PFN_vkCmdBuildMicromapsEXT CmdBuildMicromapsEXT{ nullptr };
    PFN_vkBuildMicromapsEXT BuildMicromapsEXT{ nullptr };
    PFN_vkCopyMicromapEXT CopyMicromapEXT{ nullptr };
    PFN_vkCopyMicromapToMemoryEXT CopyMicromapToMemoryEXT{ nullptr };
    PFN_vkCopyMemoryToMicromapEXT CopyMemoryToMicromapEXT{ nullptr };
    PFN_vkWriteMicromapsPropertiesEXT WriteMicromapsPropertiesEXT{ nullptr };
    PFN_vkCmdCopyMicromapEXT CmdCopyMicromapEXT{ nullptr };
    PFN_vkCmdCopyMicromapToMemoryEXT CmdCopyMicromapToMemoryEXT{ nullptr };
    PFN_vkCmdCopyMemoryToMicromapEXT CmdCopyMemoryToMicromapEXT{ nullptr };
    PFN_vkCmdWriteMicromapsPropertiesEXT CmdWriteMicromapsPropertiesEXT{ nullptr };
    PFN_vkGetDeviceMicromapCompatibilityEXT GetDeviceMicromapCompatibilityEXT{ nullptr };
    PFN_vkGetMicromapBuildSizesEXT GetMicromapBuildSizesEXT{ nullptr };
    PFN_vkCmdDrawClusterHUAWEI CmdDrawClusterHUAWEI{ nullptr };
    PFN_vkCmdDrawClusterIndirectHUAWEI CmdDrawClusterIndirectHUAWEI{ nullptr };
    PFN_vkSetDeviceMemoryPriorityEXT SetDeviceMemoryPriorityEXT{ nullptr };
    PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE GetDescriptorSetLayoutHostMappingInfoVALVE{ nullptr };
    PFN_vkGetDescriptorSetHostMappingVALVE GetDescriptorSetHostMappingVALVE{ nullptr };
    PFN_vkCmdSetTessellationDomainOriginEXT CmdSetTessellationDomainOriginEXT{ nullptr };
    PFN_vkCmdSetDepthClampEnableEXT CmdSetDepthClampEnableEXT{ nullptr };
    PFN_vkCmdSetPolygonModeEXT CmdSetPolygonModeEXT{ nullptr };
    PFN_vkCmdSetRasterizationSamplesEXT CmdSetRasterizationSamplesEXT{ nullptr };
    PFN_vkCmdSetSampleMaskEXT CmdSetSampleMaskEXT{ nullptr };
    PFN_vkCmdSetAlphaToCoverageEnableEXT CmdSetAlphaToCoverageEnableEXT{ nullptr };
    PFN_vkCmdSetAlphaToOneEnableEXT CmdSetAlphaToOneEnableEXT{ nullptr };
    PFN_vkCmdSetLogicOpEnableEXT CmdSetLogicOpEnableEXT{ nullptr };
    PFN_vkCmdSetColorBlendEnableEXT CmdSetColorBlendEnableEXT{ nullptr };
    PFN_vkCmdSetColorBlendEquationEXT CmdSetColorBlendEquationEXT{ nullptr };
    PFN_vkCmdSetColorWriteMaskEXT CmdSetColorWriteMaskEXT{ nullptr };
    PFN_vkCmdSetRasterizationStreamEXT CmdSetRasterizationStreamEXT{ nullptr };
    PFN_vkCmdSetConservativeRasterizationModeEXT CmdSetConservativeRasterizationModeEXT{ nullptr };
    PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT CmdSetExtraPrimitiveOverestimationSizeEXT{ nullptr };
    PFN_vkCmdSetDepthClipEnableEXT CmdSetDepthClipEnableEXT{ nullptr };
    PFN_vkCmdSetSampleLocationsEnableEXT CmdSetSampleLocationsEnableEXT{ nullptr };
    PFN_vkCmdSetColorBlendAdvancedEXT CmdSetColorBlendAdvancedEXT{ nullptr };
    PFN_vkCmdSetProvokingVertexModeEXT CmdSetProvokingVertexModeEXT{ nullptr };
    PFN_vkCmdSetLineRasterizationModeEXT CmdSetLineRasterizationModeEXT{ nullptr };
    PFN_vkCmdSetLineStippleEnableEXT CmdSetLineStippleEnableEXT{ nullptr };
    PFN_vkCmdSetDepthClipNegativeOneToOneEXT CmdSetDepthClipNegativeOneToOneEXT{ nullptr };
    PFN_vkCmdSetViewportWScalingEnableNV CmdSetViewportWScalingEnableNV{ nullptr };
    PFN_vkCmdSetViewportSwizzleNV CmdSetViewportSwizzleNV{ nullptr };
    PFN_vkCmdSetCoverageToColorEnableNV CmdSetCoverageToColorEnableNV{ nullptr };
    PFN_vkCmdSetCoverageToColorLocationNV CmdSetCoverageToColorLocationNV{ nullptr };
    PFN_vkCmdSetCoverageModulationModeNV CmdSetCoverageModulationModeNV{ nullptr };
    PFN_vkCmdSetCoverageModulationTableEnableNV CmdSetCoverageModulationTableEnableNV{ nullptr };
    PFN_vkCmdSetCoverageModulationTableNV CmdSetCoverageModulationTableNV{ nullptr };
    PFN_vkCmdSetShadingRateImageEnableNV CmdSetShadingRateImageEnableNV{ nullptr };
    PFN_vkCmdSetRepresentativeFragmentTestEnableNV CmdSetRepresentativeFragmentTestEnableNV{ nullptr };
    PFN_vkCmdSetCoverageReductionModeNV CmdSetCoverageReductionModeNV{ nullptr };
    PFN_vkGetShaderModuleIdentifierEXT GetShaderModuleIdentifierEXT{ nullptr };
    PFN_vkGetShaderModuleCreateInfoIdentifierEXT GetShaderModuleCreateInfoIdentifierEXT{ nullptr };
    PFN_vkCreateOpticalFlowSessionNV CreateOpticalFlowSessionNV{ nullptr };
    PFN_vkDestroyOpticalFlowSessionNV DestroyOpticalFlowSessionNV{ nullptr };
    PFN_vkBindOpticalFlowSessionImageNV BindOpticalFlowSessionImageNV{ nullptr };
    PFN_vkCmdOpticalFlowExecuteNV CmdOpticalFlowExecuteNV{ nullptr };
    PFN_vkCreateShadersEXT CreateShadersEXT{ nullptr };
    PFN_vkDestroyShaderEXT DestroyShaderEXT{ nullptr };
    PFN_vkGetShaderBinaryDataEXT GetShaderBinaryDataEXT{ nullptr };
    PFN_vkCmdBindShadersEXT CmdBindShadersEXT{ nullptr };
    PFN_vkGetFramebufferTilePropertiesQCOM GetFramebufferTilePropertiesQCOM{ nullptr };
    PFN_vkGetDynamicRenderingTilePropertiesQCOM GetDynamicRenderingTilePropertiesQCOM{ nullptr };
    PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT CmdSetAttachmentFeedbackLoopEnableEXT{ nullptr };
    PFN_vkCreateAccelerationStructureKHR CreateAccelerationStructureKHR{ nullptr };
    PFN_vkDestroyAccelerationStructureKHR DestroyAccelerationStructureKHR{ nullptr };
    PFN_vkCmdBuildAccelerationStructuresKHR CmdBuildAccelerationStructuresKHR{ nullptr };
    PFN_vkCmdBuildAccelerationStructuresIndirectKHR CmdBuildAccelerationStructuresIndirectKHR{ nullptr };
    PFN_vkBuildAccelerationStructuresKHR BuildAccelerationStructuresKHR{ nullptr };
    PFN_vkCopyAccelerationStructureKHR CopyAccelerationStructureKHR{ nullptr };
    PFN_vkCopyAccelerationStructureToMemoryKHR CopyAccelerationStructureToMemoryKHR{ nullptr };
    PFN_vkCopyMemoryToAccelerationStructureKHR CopyMemoryToAccelerationStructureKHR{ nullptr };
    PFN_vkWriteAccelerationStructuresPropertiesKHR WriteAccelerationStructuresPropertiesKHR{ nullptr };
    PFN_vkCmdCopyAccelerationStructureKHR CmdCopyAccelerationStructureKHR{ nullptr };
    PFN_vkCmdCopyAccelerationStructureToMemoryKHR CmdCopyAccelerationStructureToMemoryKHR{ nullptr };
    PFN_vkCmdCopyMemoryToAccelerationStructureKHR CmdCopyMemoryToAccelerationStructureKHR{ nullptr };
    PFN_vkGetAccelerationStructureDeviceAddressKHR GetAccelerationStructureDeviceAddressKHR{ nullptr };
    PFN_vkCmdWriteAccelerationStructuresPropertiesKHR CmdWriteAccelerationStructuresPropertiesKHR{ nullptr };
    PFN_vkGetDeviceAccelerationStructureCompatibilityKHR GetDeviceAccelerationStructureCompatibilityKHR{ nullptr };
    PFN_vkGetAccelerationStructureBuildSizesKHR GetAccelerationStructureBuildSizesKHR{ nullptr };
    PFN_vkCmdTraceRaysKHR CmdTraceRaysKHR{ nullptr };
    PFN_vkCreateRayTracingPipelinesKHR CreateRayTracingPipelinesKHR{ nullptr };
    PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR GetRayTracingCaptureReplayShaderGroupHandlesKHR{ nullptr };
    PFN_vkCmdTraceRaysIndirectKHR CmdTraceRaysIndirectKHR{ nullptr };
    PFN_vkGetRayTracingShaderGroupStackSizeKHR GetRayTracingShaderGroupStackSizeKHR{ nullptr };
    PFN_vkCmdSetRayTracingPipelineStackSizeKHR CmdSetRayTracingPipelineStackSizeKHR{ nullptr };
    PFN_vkCmdDrawMeshTasksEXT CmdDrawMeshTasksEXT{ nullptr };
    PFN_vkCmdDrawMeshTasksIndirectEXT CmdDrawMeshTasksIndirectEXT{ nullptr };
    PFN_vkCmdDrawMeshTasksIndirectCountEXT CmdDrawMeshTasksIndirectCountEXT{ nullptr };
};

template <typename GetProcAddr, typename Handle, typename FuncP>
static void LoadFunction(GetProcAddr gpa, Handle handle, const char* name, FuncP* funcp)
{
    FuncP result = reinterpret_cast<FuncP>(gpa(handle, name));
    if (result != nullptr)
    {
        (*funcp) = result;
    }
}

static void LoadInstanceTable(PFN_vkGetInstanceProcAddr gpa, VkInstance instance, InstanceTable* table)
{
    assert(table != nullptr);

    LoadFunction(gpa, instance, "vkDestroyInstance", &table->DestroyInstance);
    LoadFunction(gpa, instance, "vkEnumeratePhysicalDevices", &table->EnumeratePhysicalDevices);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceFeatures", &table->GetPhysicalDeviceFeatures);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceFormatProperties", &table->GetPhysicalDeviceFormatProperties);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceImageFormatProperties", &table->GetPhysicalDeviceImageFormatProperties);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceProperties", &table->GetPhysicalDeviceProperties);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceQueueFamilyProperties", &table->GetPhysicalDeviceQueueFamilyProperties);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceMemoryProperties", &table->GetPhysicalDeviceMemoryProperties);
    table->GetInstanceProcAddr = gpa;
    LoadFunction(gpa, instance, "vkEnumerateDeviceExtensionProperties", &table->EnumerateDeviceExtensionProperties);
    LoadFunction(gpa, instance, "vkEnumerateDeviceLayerProperties", &table->EnumerateDeviceLayerProperties);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceSparseImageFormatProperties", &table->GetPhysicalDeviceSparseImageFormatProperties);
    LoadFunction(gpa, instance, "vkEnumeratePhysicalDeviceGroups", &table->EnumeratePhysicalDeviceGroups);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceFeatures2", &table->GetPhysicalDeviceFeatures2);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceProperties2", &table->GetPhysicalDeviceProperties2);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceFormatProperties2", &table->GetPhysicalDeviceFormatProperties2);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceImageFormatProperties2", &table->GetPhysicalDeviceImageFormatProperties2);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceQueueFamilyProperties2", &table->GetPhysicalDeviceQueueFamilyProperties2);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceMemoryProperties2", &table->GetPhysicalDeviceMemoryProperties2);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceSparseImageFormatProperties2", &table->GetPhysicalDeviceSparseImageFormatProperties2);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceExternalBufferProperties", &table->GetPhysicalDeviceExternalBufferProperties);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceExternalFenceProperties", &table->GetPhysicalDeviceExternalFenceProperties);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceExternalSemaphoreProperties", &table->GetPhysicalDeviceExternalSemaphoreProperties);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceToolProperties", &table->GetPhysicalDeviceToolProperties);
    LoadFunction(gpa, instance, "vkDestroySurfaceKHR", &table->DestroySurfaceKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceSurfaceSupportKHR", &table->GetPhysicalDeviceSurfaceSupportKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR", &table->GetPhysicalDeviceSurfaceCapabilitiesKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceSurfaceFormatsKHR", &table->GetPhysicalDeviceSurfaceFormatsKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceSurfacePresentModesKHR", &table->GetPhysicalDeviceSurfacePresentModesKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDevicePresentRectanglesKHR", &table->GetPhysicalDevicePresentRectanglesKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceDisplayPropertiesKHR", &table->GetPhysicalDeviceDisplayPropertiesKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR", &table->GetPhysicalDeviceDisplayPlanePropertiesKHR);
    LoadFunction(gpa, instance, "vkGetDisplayPlaneSupportedDisplaysKHR", &table->GetDisplayPlaneSupportedDisplaysKHR);
    LoadFunction(gpa, instance, "vkGetDisplayModePropertiesKHR", &table->GetDisplayModePropertiesKHR);
    LoadFunction(gpa, instance, "vkCreateDisplayModeKHR", &table->CreateDisplayModeKHR);
    LoadFunction(gpa, instance, "vkGetDisplayPlaneCapabilitiesKHR", &table->GetDisplayPlaneCapabilitiesKHR);
    LoadFunction(gpa, instance, "vkCreateDisplayPlaneSurfaceKHR", &table->CreateDisplayPlaneSurfaceKHR);
    LoadFunction(gpa, instance, "vkCreateXlibSurfaceKHR", &table->CreateXlibSurfaceKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceXlibPresentationSupportKHR", &table->GetPhysicalDeviceXlibPresentationSupportKHR);
    LoadFunction(gpa, instance, "vkCreateXcbSurfaceKHR", &table->CreateXcbSurfaceKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceXcbPresentationSupportKHR", &table->GetPhysicalDeviceXcbPresentationSupportKHR);
    LoadFunction(gpa, instance, "vkCreateWaylandSurfaceKHR", &table->CreateWaylandSurfaceKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceWaylandPresentationSupportKHR", &table->GetPhysicalDeviceWaylandPresentationSupportKHR);
    LoadFunction(gpa, instance, "vkCreateAndroidSurfaceKHR", &table->CreateAndroidSurfaceKHR);
    LoadFunction(gpa, instance, "vkCreateWin32SurfaceKHR", &table->CreateWin32SurfaceKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceWin32PresentationSupportKHR", &table->GetPhysicalDeviceWin32PresentationSupportKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceVideoCapabilitiesKHR", &table->GetPhysicalDeviceVideoCapabilitiesKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceVideoFormatPropertiesKHR", &table->GetPhysicalDeviceVideoFormatPropertiesKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceFeatures2KHR", &table->GetPhysicalDeviceFeatures2KHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceProperties2KHR", &table->GetPhysicalDeviceProperties2KHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceFormatProperties2KHR", &table->GetPhysicalDeviceFormatProperties2KHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceImageFormatProperties2KHR", &table->GetPhysicalDeviceImageFormatProperties2KHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceQueueFamilyProperties2KHR", &table->GetPhysicalDeviceQueueFamilyProperties2KHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceMemoryProperties2KHR", &table->GetPhysicalDeviceMemoryProperties2KHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR", &table->GetPhysicalDeviceSparseImageFormatProperties2KHR);
    LoadFunction(gpa, instance, "vkEnumeratePhysicalDeviceGroupsKHR", &table->EnumeratePhysicalDeviceGroupsKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceExternalBufferPropertiesKHR", &table->GetPhysicalDeviceExternalBufferPropertiesKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR", &table->GetPhysicalDeviceExternalSemaphorePropertiesKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceExternalFencePropertiesKHR", &table->GetPhysicalDeviceExternalFencePropertiesKHR);
    LoadFunction(gpa, instance, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR", &table->EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR", &table->GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR", &table->GetPhysicalDeviceSurfaceCapabilities2KHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceSurfaceFormats2KHR", &table->GetPhysicalDeviceSurfaceFormats2KHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceDisplayProperties2KHR", &table->GetPhysicalDeviceDisplayProperties2KHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR", &table->GetPhysicalDeviceDisplayPlaneProperties2KHR);
    LoadFunction(gpa, instance, "vkGetDisplayModeProperties2KHR", &table->GetDisplayModeProperties2KHR);
    LoadFunction(gpa, instance, "vkGetDisplayPlaneCapabilities2KHR", &table->GetDisplayPlaneCapabilities2KHR);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceFragmentShadingRatesKHR", &table->GetPhysicalDeviceFragmentShadingRatesKHR);
    LoadFunction(gpa, instance, "vkCreateDebugReportCallbackEXT", &table->CreateDebugReportCallbackEXT);
    LoadFunction(gpa, instance, "vkDestroyDebugReportCallbackEXT", &table->DestroyDebugReportCallbackEXT);
    LoadFunction(gpa, instance, "vkDebugReportMessageEXT", &table->DebugReportMessageEXT);
    LoadFunction(gpa, instance, "vkCreateStreamDescriptorSurfaceGGP", &table->CreateStreamDescriptorSurfaceGGP);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV", &table->GetPhysicalDeviceExternalImageFormatPropertiesNV);
    LoadFunction(gpa, instance, "vkCreateViSurfaceNN", &table->CreateViSurfaceNN);
    LoadFunction(gpa, instance, "vkReleaseDisplayEXT", &table->ReleaseDisplayEXT);
    LoadFunction(gpa, instance, "vkAcquireXlibDisplayEXT", &table->AcquireXlibDisplayEXT);
    LoadFunction(gpa, instance, "vkGetRandROutputDisplayEXT", &table->GetRandROutputDisplayEXT);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT", &table->GetPhysicalDeviceSurfaceCapabilities2EXT);
    LoadFunction(gpa, instance, "vkCreateIOSSurfaceMVK", &table->CreateIOSSurfaceMVK);
    LoadFunction(gpa, instance, "vkCreateMacOSSurfaceMVK", &table->CreateMacOSSurfaceMVK);
    LoadFunction(gpa, instance, "vkSetDebugUtilsObjectNameEXT", &table->SetDebugUtilsObjectNameEXT);
    LoadFunction(gpa, instance, "vkSetDebugUtilsObjectTagEXT", &table->SetDebugUtilsObjectTagEXT);
    LoadFunction(gpa, instance, "vkCreateDebugUtilsMessengerEXT", &table->CreateDebugUtilsMessengerEXT);
    LoadFunction(gpa, instance, "vkDestroyDebugUtilsMessengerEXT", &table->DestroyDebugUtilsMessengerEXT);
    LoadFunction(gpa, instance, "vkSubmitDebugUtilsMessageEXT", &table->SubmitDebugUtilsMessageEXT);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceMultisamplePropertiesEXT", &table->GetPhysicalDeviceMultisamplePropertiesEXT);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT", &table->GetPhysicalDeviceCalibrateableTimeDomainsEXT);
    LoadFunction(gpa, instance, "vkCreateImagePipeSurfaceFUCHSIA", &table->CreateImagePipeSurfaceFUCHSIA);
    LoadFunction(gpa, instance, "vkCreateMetalSurfaceEXT", &table->CreateMetalSurfaceEXT);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceToolPropertiesEXT", &table->GetPhysicalDeviceToolPropertiesEXT);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", &table->GetPhysicalDeviceCooperativeMatrixPropertiesNV);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV", &table->GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceSurfacePresentModes2EXT", &table->GetPhysicalDeviceSurfacePresentModes2EXT);
    LoadFunction(gpa, instance, "vkCreateHeadlessSurfaceEXT", &table->CreateHeadlessSurfaceEXT);
    LoadFunction(gpa, instance, "vkAcquireDrmDisplayEXT", &table->AcquireDrmDisplayEXT);
    LoadFunction(gpa, instance, "vkGetDrmDisplayEXT", &table->GetDrmDisplayEXT);
    LoadFunction(gpa, instance, "vkAcquireWinrtDisplayNV", &table->AcquireWinrtDisplayNV);
    LoadFunction(gpa, instance, "vkGetWinrtDisplayNV", &table->GetWinrtDisplayNV);
    LoadFunction(gpa, instance, "vkCreateDirectFBSurfaceEXT", &table->CreateDirectFBSurfaceEXT);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT", &table->GetPhysicalDeviceDirectFBPresentationSupportEXT);
    LoadFunction(gpa, instance, "vkCreateScreenSurfaceQNX", &table->CreateScreenSurfaceQNX);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceScreenPresentationSupportQNX", &table->GetPhysicalDeviceScreenPresentationSupportQNX);
    LoadFunction(gpa, instance, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV", &table->GetPhysicalDeviceOpticalFlowImageFormatsNV);
}

static void LoadDeviceTable(PFN_vkGetDeviceProcAddr gpa, VkDevice device, DeviceTable* table)
{
    assert(table != nullptr);

    table->GetDeviceProcAddr = gpa;
    LoadFunction(gpa, device, "vkDestroyDevice", &table->DestroyDevice);
    LoadFunction(gpa, device, "vkGetDeviceQueue", &table->GetDeviceQueue);
    LoadFunction(gpa, device, "vkQueueSubmit", &table->QueueSubmit);
    LoadFunction(gpa, device, "vkQueueWaitIdle", &table->QueueWaitIdle);
    LoadFunction(gpa, device, "vkDeviceWaitIdle", &table->DeviceWaitIdle);
    LoadFunction(gpa, device, "vkAllocateMemory", &table->AllocateMemory);
    LoadFunction(gpa, device, "vkFreeMemory", &table->FreeMemory);
    LoadFunction(gpa, device, "vkMapMemory", &table->MapMemory);
    LoadFunction(gpa, device, "vkUnmapMemory", &table->UnmapMemory);
    LoadFunction(gpa, device, "vkFlushMappedMemoryRanges", &table->FlushMappedMemoryRanges);
    LoadFunction(gpa, device, "vkInvalidateMappedMemoryRanges", &table->InvalidateMappedMemoryRanges);
    LoadFunction(gpa, device, "vkGetDeviceMemoryCommitment", &table->GetDeviceMemoryCommitment);
    LoadFunction(gpa, device, "vkBindBufferMemory", &table->BindBufferMemory);
    LoadFunction(gpa, device, "vkBindImageMemory", &table->BindImageMemory);
    LoadFunction(gpa, device, "vkGetBufferMemoryRequirements", &table->GetBufferMemoryRequirements);
    LoadFunction(gpa, device, "vkGetImageMemoryRequirements", &table->GetImageMemoryRequirements);
    LoadFunction(gpa, device, "vkGetImageSparseMemoryRequirements", &table->GetImageSparseMemoryRequirements);
    LoadFunction(gpa, device, "vkQueueBindSparse", &table->QueueBindSparse);
    LoadFunction(gpa, device, "vkCreateFence", &table->CreateFence);
    LoadFunction(gpa, device, "vkDestroyFence", &table->DestroyFence);
    LoadFunction(gpa, device, "vkResetFences", &table->ResetFences);
    LoadFunction(gpa, device, "vkGetFenceStatus", &table->GetFenceStatus);
    LoadFunction(gpa, device, "vkWaitForFences", &table->WaitForFences);
    LoadFunction(gpa, device, "vkCreateSemaphore", &table->CreateSemaphore);
    LoadFunction(gpa, device, "vkDestroySemaphore", &table->DestroySemaphore);
    LoadFunction(gpa, device, "vkCreateEvent", &table->CreateEvent);
    LoadFunction(gpa, device, "vkDestroyEvent", &table->DestroyEvent);
    LoadFunction(gpa, device, "vkGetEventStatus", &table->GetEventStatus);
    LoadFunction(gpa, device, "vkSetEvent", &table->SetEvent);
    LoadFunction(gpa, device, "vkResetEvent", &table->ResetEvent);
    LoadFunction(gpa, device, "vkCreateQueryPool", &table->CreateQueryPool);
    LoadFunction(gpa, device, "vkDestroyQueryPool", &table->DestroyQueryPool);
    LoadFunction(gpa, device, "vkGetQueryPoolResults", &table->GetQueryPoolResults);
    LoadFunction(gpa, device, "vkCreateBuffer", &table->CreateBuffer);
    LoadFunction(gpa, device, "vkDestroyBuffer", &table->DestroyBuffer);
    LoadFunction(gpa, device, "vkCreateBufferView", &table->CreateBufferView);
    LoadFunction(gpa, device, "vkDestroyBufferView", &table->DestroyBufferView);
    LoadFunction(gpa, device, "vkCreateImage", &table->CreateImage);
    LoadFunction(gpa, device, "vkDestroyImage", &table->DestroyImage);
    LoadFunction(gpa, device, "vkGetImageSubresourceLayout", &table->GetImageSubresourceLayout);
    LoadFunction(gpa, device, "vkCreateImageView", &table->CreateImageView);
    LoadFunction(gpa, device, "vkDestroyImageView", &table->DestroyImageView);
    LoadFunction(gpa, device, "vkCreateShaderModule", &table->CreateShaderModule);
    LoadFunction(gpa, device, "vkDestroyShaderModule", &table->DestroyShaderModule);
    LoadFunction(gpa, device, "vkCreatePipelineCache", &table->CreatePipelineCache);
    LoadFunction(gpa, device, "vkDestroyPipelineCache", &table->DestroyPipelineCache);
    LoadFunction(gpa, device, "vkGetPipelineCacheData", &table->GetPipelineCacheData);
    LoadFunction(gpa, device, "vkMergePipelineCaches", &table->MergePipelineCaches);
    LoadFunction(gpa, device, "vkCreateGraphicsPipelines", &table->CreateGraphicsPipelines);
    LoadFunction(gpa, device, "vkCreateComputePipelines", &table->CreateComputePipelines);
    LoadFunction(gpa, device, "vkDestroyPipeline", &table->DestroyPipeline);
    LoadFunction(gpa, device, "vkCreatePipelineLayout", &table->CreatePipelineLayout);
    LoadFunction(gpa, device, "vkDestroyPipelineLayout", &table->DestroyPipelineLayout);
    LoadFunction(gpa, device, "vkCreateSampler", &table->CreateSampler);
    LoadFunction(gpa, device, "vkDestroySampler", &table->DestroySampler);
    LoadFunction(gpa, device, "vkCreateDescriptorSetLayout", &table->CreateDescriptorSetLayout);
    LoadFunction(gpa, device, "vkDestroyDescriptorSetLayout", &table->DestroyDescriptorSetLayout);
    LoadFunction(gpa, device, "vkCreateDescriptorPool", &table->CreateDescriptorPool);
    LoadFunction(gpa, device, "vkDestroyDescriptorPool", &table->DestroyDescriptorPool);
    LoadFunction(gpa, device, "vkResetDescriptorPool", &table->ResetDescriptorPool);
    LoadFunction(gpa, device, "vkAllocateDescriptorSets", &table->AllocateDescriptorSets);
    LoadFunction(gpa, device, "vkFreeDescriptorSets", &table->FreeDescriptorSets);
    LoadFunction(gpa, device, "vkUpdateDescriptorSets", &table->UpdateDescriptorSets);
    LoadFunction(gpa, device, "vkCreateFramebuffer", &table->CreateFramebuffer);
    LoadFunction(gpa, device, "vkDestroyFramebuffer", &table->DestroyFramebuffer);
    LoadFunction(gpa, device, "vkCreateRenderPass", &table->CreateRenderPass);
    LoadFunction(gpa, device, "vkDestroyRenderPass", &table->DestroyRenderPass);
    LoadFunction(gpa, device, "vkGetRenderAreaGranularity", &table->GetRenderAreaGranularity);
    LoadFunction(gpa, device, "vkCreateCommandPool", &table->CreateCommandPool);
    LoadFunction(gpa, device, "vkDestroyCommandPool", &table->DestroyCommandPool);
    LoadFunction(gpa, device, "vkResetCommandPool", &table->ResetCommandPool);
    LoadFunction(gpa, device, "vkAllocateCommandBuffers", &table->AllocateCommandBuffers);
    LoadFunction(gpa, device, "vkFreeCommandBuffers", &table->FreeCommandBuffers);
    LoadFunction(gpa, device, "vkBeginCommandBuffer", &table->BeginCommandBuffer);
    LoadFunction(gpa, device, "vkEndCommandBuffer", &table->EndCommandBuffer);
    LoadFunction(gpa, device, "vkResetCommandBuffer", &table->ResetCommandBuffer);
    LoadFunction(gpa, device, "vkCmdBindPipeline", &table->CmdBindPipeline);
    LoadFunction(gpa, device, "vkCmdSetViewport", &table->CmdSetViewport);
    LoadFunction(gpa, device, "vkCmdSetScissor", &table->CmdSetScissor);
    LoadFunction(gpa, device, "vkCmdSetLineWidth", &table->CmdSetLineWidth);
    LoadFunction(gpa, device, "vkCmdSetDepthBias", &table->CmdSetDepthBias);
    LoadFunction(gpa, device, "vkCmdSetBlendConstants", &table->CmdSetBlendConstants);
    LoadFunction(gpa, device, "vkCmdSetDepthBounds", &table->CmdSetDepthBounds);
    LoadFunction(gpa, device, "vkCmdSetStencilCompareMask", &table->CmdSetStencilCompareMask);
    LoadFunction(gpa, device, "vkCmdSetStencilWriteMask", &table->CmdSetStencilWriteMask);
    LoadFunction(gpa, device, "vkCmdSetStencilReference", &table->CmdSetStencilReference);
    LoadFunction(gpa, device, "vkCmdBindDescriptorSets", &table->CmdBindDescriptorSets);
    LoadFunction(gpa, device, "vkCmdBindIndexBuffer", &table->CmdBindIndexBuffer);
    LoadFunction(gpa, device, "vkCmdBindVertexBuffers", &table->CmdBindVertexBuffers);
    LoadFunction(gpa, device, "vkCmdDraw", &table->CmdDraw);
    LoadFunction(gpa, device, "vkCmdDrawIndexed", &table->CmdDrawIndexed);
    LoadFunction(gpa, device, "vkCmdDrawIndirect", &table->CmdDrawIndirect);
    LoadFunction(gpa, device, "vkCmdDrawIndexedIndirect", &table->CmdDrawIndexedIndirect);
    LoadFunction(gpa, device, "vkCmdDispatch", &table->CmdDispatch);
    LoadFunction(gpa, device, "vkCmdDispatchIndirect", &table->CmdDispatchIndirect);
    LoadFunction(gpa, device, "vkCmdCopyBuffer", &table->CmdCopyBuffer);
    LoadFunction(gpa, device, "vkCmdCopyImage", &table->CmdCopyImage);
    LoadFunction(gpa, device, "vkCmdBlitImage", &table->CmdBlitImage);
    LoadFunction(gpa, device, "vkCmdCopyBufferToImage", &table->CmdCopyBufferToImage);
    LoadFunction(gpa, device, "vkCmdCopyImageToBuffer", &table->CmdCopyImageToBuffer);
    LoadFunction(gpa, device, "vkCmdUpdateBuffer", &table->CmdUpdateBuffer);
    LoadFunction(gpa, device, "vkCmdFillBuffer", &table->CmdFillBuffer);
    LoadFunction(gpa, device, "vkCmdClearColorImage", &table->CmdClearColorImage);
    LoadFunction(gpa, device, "vkCmdClearDepthStencilImage", &table->CmdClearDepthStencilImage);
    LoadFunction(gpa, device, "vkCmdClearAttachments", &table->CmdClearAttachments);
    LoadFunction(gpa, device, "vkCmdResolveImage", &table->CmdResolveImage);
    LoadFunction(gpa, device, "vkCmdSetEvent", &table->CmdSetEvent);
    LoadFunction(gpa, device, "vkCmdResetEvent", &table->CmdResetEvent);
    LoadFunction(gpa, device, "vkCmdWaitEvents", &table->CmdWaitEvents);
    LoadFunction(gpa, device, "vkCmdPipelineBarrier", &table->CmdPipelineBarrier);
    LoadFunction(gpa, device, "vkCmdBeginQuery", &table->CmdBeginQuery);
    LoadFunction(gpa, device, "vkCmdEndQuery", &table->CmdEndQuery);
    LoadFunction(gpa, device, "vkCmdResetQueryPool", &table->CmdResetQueryPool);
    LoadFunction(gpa, device, "vkCmdWriteTimestamp", &table->CmdWriteTimestamp);
    LoadFunction(gpa, device, "vkCmdCopyQueryPoolResults", &table->CmdCopyQueryPoolResults);
    LoadFunction(gpa, device, "vkCmdPushConstants", &table->CmdPushConstants);
    LoadFunction(gpa, device, "vkCmdBeginRenderPass", &table->CmdBeginRenderPass);
    LoadFunction(gpa, device, "vkCmdNextSubpass", &table->CmdNextSubpass);
    LoadFunction(gpa, device, "vkCmdEndRenderPass", &table->CmdEndRenderPass);
    LoadFunction(gpa, device, "vkCmdExecuteCommands", &table->CmdExecuteCommands);
    LoadFunction(gpa, device, "vkBindBufferMemory2", &table->BindBufferMemory2);
    LoadFunction(gpa, device, "vkBindImageMemory2", &table->BindImageMemory2);
    LoadFunction(gpa, device, "vkGetDeviceGroupPeerMemoryFeatures", &table->GetDeviceGroupPeerMemoryFeatures);
    LoadFunction(gpa, device, "vkCmdSetDeviceMask", &table->CmdSetDeviceMask);
    LoadFunction(gpa, device, "vkCmdDispatchBase", &table->CmdDispatchBase);
    LoadFunction(gpa, device, "vkGetImageMemoryRequirements2", &table->GetImageMemoryRequirements2);
    LoadFunction(gpa, device, "vkGetBufferMemoryRequirements2", &table->GetBufferMemoryRequirements2);
    LoadFunction(gpa, device, "vkGetImageSparseMemoryRequirements2", &table->GetImageSparseMemoryRequirements2);
    LoadFunction(gpa, device, "vkTrimCommandPool", &table->TrimCommandPool);
    LoadFunction(gpa, device, "vkGetDeviceQueue2", &table->GetDeviceQueue2);
    LoadFunction(gpa, device, "vkCreateSamplerYcbcrConversion", &table->CreateSamplerYcbcrConversion);
    LoadFunction(gpa, device, "vkDestroySamplerYcbcrConversion", &table->DestroySamplerYcbcrConversion);
    LoadFunction(gpa, device, "vkCreateDescriptorUpdateTemplate", &table->CreateDescriptorUpdateTemplate);
    LoadFunction(gpa, device, "vkDestroyDescriptorUpdateTemplate", &table->DestroyDescriptorUpdateTemplate);
    LoadFunction(gpa, device, "vkUpdateDescriptorSetWithTemplate", &table->UpdateDescriptorSetWithTemplate);
    LoadFunction(gpa, device, "vkGetDescriptorSetLayoutSupport", &table->GetDescriptorSetLayoutSupport);
    LoadFunction(gpa, device, "vkCmdDrawIndirectCount", &table->CmdDrawIndirectCount);
    LoadFunction(gpa, device, "vkCmdDrawIndexedIndirectCount", &table->CmdDrawIndexedIndirectCount);
    LoadFunction(gpa, device, "vkCreateRenderPass2", &table->CreateRenderPass2);
    LoadFunction(gpa, device, "vkCmdBeginRenderPass2", &table->CmdBeginRenderPass2);
    LoadFunction(gpa, device, "vkCmdNextSubpass2", &table->CmdNextSubpass2);
    LoadFunction(gpa, device, "vkCmdEndRenderPass2", &table->CmdEndRenderPass2);
    LoadFunction(gpa, device, "vkResetQueryPool", &table->ResetQueryPool);
    LoadFunction(gpa, device, "vkGetSemaphoreCounterValue", &table->GetSemaphoreCounterValue);
    LoadFunction(gpa, device, "vkWaitSemaphores", &table->WaitSemaphores);
    LoadFunction(gpa, device, "vkSignalSemaphore", &table->SignalSemaphore);
    LoadFunction(gpa, device, "vkGetBufferDeviceAddress", &table->GetBufferDeviceAddress);
    LoadFunction(gpa, device, "vkGetBufferOpaqueCaptureAddress", &table->GetBufferOpaqueCaptureAddress);
    LoadFunction(gpa, device, "vkGetDeviceMemoryOpaqueCaptureAddress", &table->GetDeviceMemoryOpaqueCaptureAddress);
    LoadFunction(gpa, device, "vkCreatePrivateDataSlot", &table->CreatePrivateDataSlot);
    LoadFunction(gpa, device, "vkDestroyPrivateDataSlot", &table->DestroyPrivateDataSlot);
    LoadFunction(gpa, device, "vkSetPrivateData", &table->SetPrivateData);
    LoadFunction(gpa, device, "vkGetPrivateData", &table->GetPrivateData);
    LoadFunction(gpa, device, "vkCmdSetEvent2", &table->CmdSetEvent2);
    LoadFunction(gpa, device, "vkCmdResetEvent2", &table->CmdResetEvent2);
    LoadFunction(gpa, device, "vkCmdWaitEvents2", &table->CmdWaitEvents2);
    LoadFunction(gpa, device, "vkCmdPipelineBarrier2", &table->CmdPipelineBarrier2);
    LoadFunction(gpa, device, "vkCmdWriteTimestamp2", &table->CmdWriteTimestamp2);
    LoadFunction(gpa, device, "vkQueueSubmit2", &table->QueueSubmit2);
    LoadFunction(gpa, device, "vkCmdCopyBuffer2", &table->CmdCopyBuffer2);
    LoadFunction(gpa, device, "vkCmdCopyImage2", &table->CmdCopyImage2);
    LoadFunction(gpa, device, "vkCmdCopyBufferToImage2", &table->CmdCopyBufferToImage2);
    LoadFunction(gpa, device, "vkCmdCopyImageToBuffer2", &table->CmdCopyImageToBuffer2);
    LoadFunction(gpa, device, "vkCmdBlitImage2", &table->CmdBlitImage2);
    LoadFunction(gpa, device, "vkCmdResolveImage2", &table->CmdResolveImage2);
    LoadFunction(gpa, device, "vkCmdBeginRendering", &table->CmdBeginRendering);
    LoadFunction(gpa, device, "vkCmdEndRendering", &table->CmdEndRendering);
    LoadFunction(gpa, device, "vkCmdSetCullMode", &table->CmdSetCullMode);
    LoadFunction(gpa, device, "vkCmdSetFrontFace", &table->CmdSetFrontFace);
    LoadFunction(gpa, device, "vkCmdSetPrimitiveTopology", &table->CmdSetPrimitiveTopology);
    LoadFunction(gpa, device, "vkCmdSetViewportWithCount", &table->CmdSetViewportWithCount);
    LoadFunction(gpa, device, "vkCmdSetScissorWithCount", &table->CmdSetScissorWithCount);
    LoadFunction(gpa, device, "vkCmdBindVertexBuffers2", &table->CmdBindVertexBuffers2);
    LoadFunction(gpa, device, "vkCmdSetDepthTestEnable", &table->CmdSetDepthTestEnable);
    LoadFunction(gpa, device, "vkCmdSetDepthWriteEnable", &table->CmdSetDepthWriteEnable);
    LoadFunction(gpa, device, "vkCmdSetDepthCompareOp", &table->CmdSetDepthCompareOp);
    LoadFunction(gpa, device, "vkCmdSetDepthBoundsTestEnable", &table->CmdSetDepthBoundsTestEnable);
    LoadFunction(gpa, device, "vkCmdSetStencilTestEnable", &table->CmdSetStencilTestEnable);
    LoadFunction(gpa, device, "vkCmdSetStencilOp", &table->CmdSetStencilOp);
    LoadFunction(gpa, device, "vkCmdSetRasterizerDiscardEnable", &table->CmdSetRasterizerDiscardEnable);
    LoadFunction(gpa, device, "vkCmdSetDepthBiasEnable", &table->CmdSetDepthBiasEnable);
    LoadFunction(gpa, device, "vkCmdSetPrimitiveRestartEnable", &table->CmdSetPrimitiveRestartEnable);
    LoadFunction(gpa, device, "vkGetDeviceBufferMemoryRequirements", &table->GetDeviceBufferMemoryRequirements);
    LoadFunction(gpa, device, "vkGetDeviceImageMemoryRequirements", &table->GetDeviceImageMemoryRequirements);
    LoadFunction(gpa, device, "vkGetDeviceImageSparseMemoryRequirements", &table->GetDeviceImageSparseMemoryRequirements);
    LoadFunction(gpa, device, "vkCreateSwapchainKHR", &table->CreateSwapchainKHR);
    LoadFunction(gpa, device, "vkDestroySwapchainKHR", &table->DestroySwapchainKHR);
    LoadFunction(gpa, device, "vkGetSwapchainImagesKHR", &table->GetSwapchainImagesKHR);
    LoadFunction(gpa, device, "vkAcquireNextImageKHR", &table->AcquireNextImageKHR);
    LoadFunction(gpa, device, "vkQueuePresentKHR", &table->QueuePresentKHR);
    LoadFunction(gpa, device, "vkGetDeviceGroupPresentCapabilitiesKHR", &table->GetDeviceGroupPresentCapabilitiesKHR);
    LoadFunction(gpa, device, "vkGetDeviceGroupSurfacePresentModesKHR", &table->GetDeviceGroupSurfacePresentModesKHR);
    LoadFunction(gpa, device, "vkAcquireNextImage2KHR", &table->AcquireNextImage2KHR);
    LoadFunction(gpa, device, "vkCreateSharedSwapchainsKHR", &table->CreateSharedSwapchainsKHR);
    LoadFunction(gpa, device, "vkCreateVideoSessionKHR", &table->CreateVideoSessionKHR);
    LoadFunction(gpa, device, "vkDestroyVideoSessionKHR", &table->DestroyVideoSessionKHR);
    LoadFunction(gpa, device, "vkGetVideoSessionMemoryRequirementsKHR", &table->GetVideoSessionMemoryRequirementsKHR);
    LoadFunction(gpa, device, "vkBindVideoSessionMemoryKHR", &table->BindVideoSessionMemoryKHR);
    LoadFunction(gpa, device, "vkCreateVideoSessionParametersKHR", &table->CreateVideoSessionParametersKHR);
    LoadFunction(gpa, device, "vkUpdateVideoSessionParametersKHR", &table->UpdateVideoSessionParametersKHR);
    LoadFunction(gpa, device, "vkDestroyVideoSessionParametersKHR", &table->DestroyVideoSessionParametersKHR);
    LoadFunction(gpa, device, "vkCmdBeginVideoCodingKHR", &table->CmdBeginVideoCodingKHR);
    LoadFunction(gpa, device, "vkCmdEndVideoCodingKHR", &table->CmdEndVideoCodingKHR);
    LoadFunction(gpa, device, "vkCmdControlVideoCodingKHR", &table->CmdControlVideoCodingKHR);
    LoadFunction(gpa, device, "vkCmdDecodeVideoKHR", &table->CmdDecodeVideoKHR);
    LoadFunction(gpa, device, "vkCmdBeginRenderingKHR", &table->CmdBeginRenderingKHR);
    LoadFunction(gpa, device, "vkCmdEndRenderingKHR", &table->CmdEndRenderingKHR);
    LoadFunction(gpa, device, "vkGetDeviceGroupPeerMemoryFeaturesKHR", &table->GetDeviceGroupPeerMemoryFeaturesKHR);
    LoadFunction(gpa, device, "vkCmdSetDeviceMaskKHR", &table->CmdSetDeviceMaskKHR);
    LoadFunction(gpa, device, "vkCmdDispatchBaseKHR", &table->CmdDispatchBaseKHR);
    LoadFunction(gpa, device, "vkTrimCommandPoolKHR", &table->TrimCommandPoolKHR);
    LoadFunction(gpa, device, "vkGetMemoryWin32HandleKHR", &table->GetMemoryWin32HandleKHR);
    LoadFunction(gpa, device, "vkGetMemoryWin32HandlePropertiesKHR", &table->GetMemoryWin32HandlePropertiesKHR);
    LoadFunction(gpa, device, "vkGetMemoryFdKHR", &table->GetMemoryFdKHR);
    LoadFunction(gpa, device, "vkGetMemoryFdPropertiesKHR", &table->GetMemoryFdPropertiesKHR);
    LoadFunction(gpa, device, "vkImportSemaphoreWin32HandleKHR", &table->ImportSemaphoreWin32HandleKHR);
    LoadFunction(gpa, device, "vkGetSemaphoreWin32HandleKHR", &table->GetSemaphoreWin32HandleKHR);
    LoadFunction(gpa, device, "vkImportSemaphoreFdKHR", &table->ImportSemaphoreFdKHR);
    LoadFunction(gpa, device, "vkGetSemaphoreFdKHR", &table->GetSemaphoreFdKHR);
    LoadFunction(gpa, device, "vkCmdPushDescriptorSetKHR", &table->CmdPushDescriptorSetKHR);
    LoadFunction(gpa, device, "vkCmdPushDescriptorSetWithTemplateKHR", &table->CmdPushDescriptorSetWithTemplateKHR);
    LoadFunction(gpa, device, "vkCreateDescriptorUpdateTemplateKHR", &table->CreateDescriptorUpdateTemplateKHR);
    LoadFunction(gpa, device, "vkDestroyDescriptorUpdateTemplateKHR", &table->DestroyDescriptorUpdateTemplateKHR);
    LoadFunction(gpa, device, "vkUpdateDescriptorSetWithTemplateKHR", &table->UpdateDescriptorSetWithTemplateKHR);
    LoadFunction(gpa, device, "vkCreateRenderPass2KHR", &table->CreateRenderPass2KHR);
    LoadFunction(gpa, device, "vkCmdBeginRenderPass2KHR", &table->CmdBeginRenderPass2KHR);
    LoadFunction(gpa, device, "vkCmdNextSubpass2KHR", &table->CmdNextSubpass2KHR);
    LoadFunction(gpa, device, "vkCmdEndRenderPass2KHR", &table->CmdEndRenderPass2KHR);
    LoadFunction(gpa, device, "vkGetSwapchainStatusKHR", &table->GetSwapchainStatusKHR);
    LoadFunction(gpa, device, "vkImportFenceWin32HandleKHR", &table->ImportFenceWin32HandleKHR);
    LoadFunction(gpa, device, "vkGetFenceWin32HandleKHR", &table->GetFenceWin32HandleKHR);
    LoadFunction(gpa, device, "vkImportFenceFdKHR", &table->ImportFenceFdKHR);
    LoadFunction(gpa, device, "vkGetFenceFdKHR", &table->GetFenceFdKHR);
    LoadFunction(gpa, device, "vkAcquireProfilingLockKHR", &table->AcquireProfilingLockKHR);
    LoadFunction(gpa, device, "vkReleaseProfilingLockKHR", &table->ReleaseProfilingLockKHR);
    LoadFunction(gpa, device, "vkGetImageMemoryRequirements2KHR", &table->GetImageMemoryRequirements2KHR);
    LoadFunction(gpa, device, "vkGetBufferMemoryRequirements2KHR", &table->GetBufferMemoryRequirements2KHR);
    LoadFunction(gpa, device, "vkGetImageSparseMemoryRequirements2KHR", &table->GetImageSparseMemoryRequirements2KHR);
    LoadFunction(gpa, device, "vkCreateSamplerYcbcrConversionKHR", &table->CreateSamplerYcbcrConversionKHR);
    LoadFunction(gpa, device, "vkDestroySamplerYcbcrConversionKHR", &table->DestroySamplerYcbcrConversionKHR);
    LoadFunction(gpa, device, "vkBindBufferMemory2KHR", &table->BindBufferMemory2KHR);
    LoadFunction(gpa, device, "vkBindImageMemory2KHR", &table->BindImageMemory2KHR);
    LoadFunction(gpa, device, "vkGetDescriptorSetLayoutSupportKHR", &table->GetDescriptorSetLayoutSupportKHR);
    LoadFunction(gpa, device, "vkCmdDrawIndirectCountKHR", &table->CmdDrawIndirectCountKHR);
    LoadFunction(gpa, device, "vkCmdDrawIndexedIndirectCountKHR", &table->CmdDrawIndexedIndirectCountKHR);
    LoadFunction(gpa, device, "vkGetSemaphoreCounterValueKHR", &table->GetSemaphoreCounterValueKHR);
    LoadFunction(gpa, device, "vkWaitSemaphoresKHR", &table->WaitSemaphoresKHR);
    LoadFunction(gpa, device, "vkSignalSemaphoreKHR", &table->SignalSemaphoreKHR);
    LoadFunction(gpa, device, "vkCmdSetFragmentShadingRateKHR", &table->CmdSetFragmentShadingRateKHR);
    LoadFunction(gpa, device, "vkWaitForPresentKHR", &table->WaitForPresentKHR);
    LoadFunction(gpa, device, "vkGetBufferDeviceAddressKHR", &table->GetBufferDeviceAddressKHR);
    LoadFunction(gpa, device, "vkGetBufferOpaqueCaptureAddressKHR", &table->GetBufferOpaqueCaptureAddressKHR);
    LoadFunction(gpa, device, "vkGetDeviceMemoryOpaqueCaptureAddressKHR", &table->GetDeviceMemoryOpaqueCaptureAddressKHR);
    LoadFunction(gpa, device, "vkCreateDeferredOperationKHR", &table->CreateDeferredOperationKHR);
    LoadFunction(gpa, device, "vkDestroyDeferredOperationKHR", &table->DestroyDeferredOperationKHR);
    LoadFunction(gpa, device, "vkGetDeferredOperationMaxConcurrencyKHR", &table->GetDeferredOperationMaxConcurrencyKHR);
    LoadFunction(gpa, device, "vkGetDeferredOperationResultKHR", &table->GetDeferredOperationResultKHR);
    LoadFunction(gpa, device, "vkDeferredOperationJoinKHR", &table->DeferredOperationJoinKHR);
    LoadFunction(gpa, device, "vkGetPipelineExecutablePropertiesKHR", &table->GetPipelineExecutablePropertiesKHR);
    LoadFunction(gpa, device, "vkGetPipelineExecutableStatisticsKHR", &table->GetPipelineExecutableStatisticsKHR);
    LoadFunction(gpa, device, "vkGetPipelineExecutableInternalRepresentationsKHR", &table->GetPipelineExecutableInternalRepresentationsKHR);
    LoadFunction(gpa, device, "vkMapMemory2KHR", &table->MapMemory2KHR);
    LoadFunction(gpa, device, "vkUnmapMemory2KHR", &table->UnmapMemory2KHR);
    LoadFunction(gpa, device, "vkCmdEncodeVideoKHR", &table->CmdEncodeVideoKHR);
    LoadFunction(gpa, device, "vkCmdSetEvent2KHR", &table->CmdSetEvent2KHR);
    LoadFunction(gpa, device, "vkCmdResetEvent2KHR", &table->CmdResetEvent2KHR);
    LoadFunction(gpa, device, "vkCmdWaitEvents2KHR", &table->CmdWaitEvents2KHR);
    LoadFunction(gpa, device, "vkCmdPipelineBarrier2KHR", &table->CmdPipelineBarrier2KHR);
    LoadFunction(gpa, device, "vkCmdWriteTimestamp2KHR", &table->CmdWriteTimestamp2KHR);
    LoadFunction(gpa, device, "vkQueueSubmit2KHR", &table->QueueSubmit2KHR);
    LoadFunction(gpa, device, "vkCmdWriteBufferMarker2AMD", &table->CmdWriteBufferMarker2AMD);
    LoadFunction(gpa, device, "vkGetQueueCheckpointData2NV", &table->GetQueueCheckpointData2NV);
    LoadFunction(gpa, device, "vkCmdCopyBuffer2KHR", &table->CmdCopyBuffer2KHR);
    LoadFunction(gpa, device, "vkCmdCopyImage2KHR", &table->CmdCopyImage2KHR);
    LoadFunction(gpa, device, "vkCmdCopyBufferToImage2KHR", &table->CmdCopyBufferToImage2KHR);
    LoadFunction(gpa, device, "vkCmdCopyImageToBuffer2KHR", &table->CmdCopyImageToBuffer2KHR);
    LoadFunction(gpa, device, "vkCmdBlitImage2KHR", &table->CmdBlitImage2KHR);
    LoadFunction(gpa, device, "vkCmdResolveImage2KHR", &table->CmdResolveImage2KHR);
    LoadFunction(gpa, device, "vkCmdTraceRaysIndirect2KHR", &table->CmdTraceRaysIndirect2KHR);
    LoadFunction(gpa, device, "vkGetDeviceBufferMemoryRequirementsKHR", &table->GetDeviceBufferMemoryRequirementsKHR);
    LoadFunction(gpa, device, "vkGetDeviceImageMemoryRequirementsKHR", &table->GetDeviceImageMemoryRequirementsKHR);
    LoadFunction(gpa, device, "vkGetDeviceImageSparseMemoryRequirementsKHR", &table->GetDeviceImageSparseMemoryRequirementsKHR);
    LoadFunction(gpa, device, "vkDebugMarkerSetObjectTagEXT", &table->DebugMarkerSetObjectTagEXT);
    LoadFunction(gpa, device, "vkDebugMarkerSetObjectNameEXT", &table->DebugMarkerSetObjectNameEXT);
    LoadFunction(gpa, device, "vkCmdDebugMarkerBeginEXT", &table->CmdDebugMarkerBeginEXT);
    LoadFunction(gpa, device, "vkCmdDebugMarkerEndEXT", &table->CmdDebugMarkerEndEXT);
    LoadFunction(gpa, device, "vkCmdDebugMarkerInsertEXT", &table->CmdDebugMarkerInsertEXT);
    LoadFunction(gpa, device, "vkCmdBindTransformFeedbackBuffersEXT", &table->CmdBindTransformFeedbackBuffersEXT);
    LoadFunction(gpa, device, "vkCmdBeginTransformFeedbackEXT", &table->CmdBeginTransformFeedbackEXT);
    LoadFunction(gpa, device, "vkCmdEndTransformFeedbackEXT", &table->CmdEndTransformFeedbackEXT);
    LoadFunction(gpa, device, "vkCmdBeginQueryIndexedEXT", &table->CmdBeginQueryIndexedEXT);
    LoadFunction(gpa, device, "vkCmdEndQueryIndexedEXT", &table->CmdEndQueryIndexedEXT);
    LoadFunction(gpa, device, "vkCmdDrawIndirectByteCountEXT", &table->CmdDrawIndirectByteCountEXT);
    LoadFunction(gpa, device, "vkGetImageViewHandleNVX", &table->GetImageViewHandleNVX);
    LoadFunction(gpa, device, "vkGetImageViewAddressNVX", &table->GetImageViewAddressNVX);
    LoadFunction(gpa, device, "vkCmdDrawIndirectCountAMD", &table->CmdDrawIndirectCountAMD);
    LoadFunction(gpa, device, "vkCmdDrawIndexedIndirectCountAMD", &table->CmdDrawIndexedIndirectCountAMD);
    LoadFunction(gpa, device, "vkGetShaderInfoAMD", &table->GetShaderInfoAMD);
    LoadFunction(gpa, device, "vkGetMemoryWin32HandleNV", &table->GetMemoryWin32HandleNV);
    LoadFunction(gpa, device, "vkCmdBeginConditionalRenderingEXT", &table->CmdBeginConditionalRenderingEXT);
    LoadFunction(gpa, device, "vkCmdEndConditionalRenderingEXT", &table->CmdEndConditionalRenderingEXT);
    LoadFunction(gpa, device, "vkCmdSetViewportWScalingNV", &table->CmdSetViewportWScalingNV);
    LoadFunction(gpa, device, "vkDisplayPowerControlEXT", &table->DisplayPowerControlEXT);
    LoadFunction(gpa, device, "vkRegisterDeviceEventEXT", &table->RegisterDeviceEventEXT);
    LoadFunction(gpa, device, "vkRegisterDisplayEventEXT", &table->RegisterDisplayEventEXT);
    LoadFunction(gpa, device, "vkGetSwapchainCounterEXT", &table->GetSwapchainCounterEXT);
    LoadFunction(gpa, device, "vkGetRefreshCycleDurationGOOGLE", &table->GetRefreshCycleDurationGOOGLE);
    LoadFunction(gpa, device, "vkGetPastPresentationTimingGOOGLE", &table->GetPastPresentationTimingGOOGLE);
    LoadFunction(gpa, device, "vkCmdSetDiscardRectangleEXT", &table->CmdSetDiscardRectangleEXT);
    LoadFunction(gpa, device, "vkCmdSetDiscardRectangleEnableEXT", &table->CmdSetDiscardRectangleEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetDiscardRectangleModeEXT", &table->CmdSetDiscardRectangleModeEXT);
    LoadFunction(gpa, device, "vkSetHdrMetadataEXT", &table->SetHdrMetadataEXT);
    LoadFunction(gpa, device, "vkQueueBeginDebugUtilsLabelEXT", &table->QueueBeginDebugUtilsLabelEXT);
    LoadFunction(gpa, device, "vkQueueEndDebugUtilsLabelEXT", &table->QueueEndDebugUtilsLabelEXT);
    LoadFunction(gpa, device, "vkQueueInsertDebugUtilsLabelEXT", &table->QueueInsertDebugUtilsLabelEXT);
    LoadFunction(gpa, device, "vkCmdBeginDebugUtilsLabelEXT", &table->CmdBeginDebugUtilsLabelEXT);
    LoadFunction(gpa, device, "vkCmdEndDebugUtilsLabelEXT", &table->CmdEndDebugUtilsLabelEXT);
    LoadFunction(gpa, device, "vkCmdInsertDebugUtilsLabelEXT", &table->CmdInsertDebugUtilsLabelEXT);
    LoadFunction(gpa, device, "vkGetAndroidHardwareBufferPropertiesANDROID", &table->GetAndroidHardwareBufferPropertiesANDROID);
    LoadFunction(gpa, device, "vkGetMemoryAndroidHardwareBufferANDROID", &table->GetMemoryAndroidHardwareBufferANDROID);
    LoadFunction(gpa, device, "vkCmdSetSampleLocationsEXT", &table->CmdSetSampleLocationsEXT);
    LoadFunction(gpa, device, "vkGetImageDrmFormatModifierPropertiesEXT", &table->GetImageDrmFormatModifierPropertiesEXT);
    LoadFunction(gpa, device, "vkCreateValidationCacheEXT", &table->CreateValidationCacheEXT);
    LoadFunction(gpa, device, "vkDestroyValidationCacheEXT", &table->DestroyValidationCacheEXT);
    LoadFunction(gpa, device, "vkMergeValidationCachesEXT", &table->MergeValidationCachesEXT);
    LoadFunction(gpa, device, "vkGetValidationCacheDataEXT", &table->GetValidationCacheDataEXT);
    LoadFunction(gpa, device, "vkCmdBindShadingRateImageNV", &table->CmdBindShadingRateImageNV);
    LoadFunction(gpa, device, "vkCmdSetViewportShadingRatePaletteNV", &table->CmdSetViewportShadingRatePaletteNV);
    LoadFunction(gpa, device, "vkCmdSetCoarseSampleOrderNV", &table->CmdSetCoarseSampleOrderNV);
    LoadFunction(gpa, device, "vkCreateAccelerationStructureNV", &table->CreateAccelerationStructureNV);
    LoadFunction(gpa, device, "vkDestroyAccelerationStructureNV", &table->DestroyAccelerationStructureNV);
    LoadFunction(gpa, device, "vkGetAccelerationStructureMemoryRequirementsNV", &table->GetAccelerationStructureMemoryRequirementsNV);
    LoadFunction(gpa, device, "vkBindAccelerationStructureMemoryNV", &table->BindAccelerationStructureMemoryNV);
    LoadFunction(gpa, device, "vkCmdBuildAccelerationStructureNV", &table->CmdBuildAccelerationStructureNV);
    LoadFunction(gpa, device, "vkCmdCopyAccelerationStructureNV", &table->CmdCopyAccelerationStructureNV);
    LoadFunction(gpa, device, "vkCmdTraceRaysNV", &table->CmdTraceRaysNV);
    LoadFunction(gpa, device, "vkCreateRayTracingPipelinesNV", &table->CreateRayTracingPipelinesNV);
    LoadFunction(gpa, device, "vkGetRayTracingShaderGroupHandlesKHR", &table->GetRayTracingShaderGroupHandlesKHR);
    LoadFunction(gpa, device, "vkGetRayTracingShaderGroupHandlesNV", &table->GetRayTracingShaderGroupHandlesNV);
    LoadFunction(gpa, device, "vkGetAccelerationStructureHandleNV", &table->GetAccelerationStructureHandleNV);
    LoadFunction(gpa, device, "vkCmdWriteAccelerationStructuresPropertiesNV", &table->CmdWriteAccelerationStructuresPropertiesNV);
    LoadFunction(gpa, device, "vkCompileDeferredNV", &table->CompileDeferredNV);
    LoadFunction(gpa, device, "vkGetMemoryHostPointerPropertiesEXT", &table->GetMemoryHostPointerPropertiesEXT);
    LoadFunction(gpa, device, "vkCmdWriteBufferMarkerAMD", &table->CmdWriteBufferMarkerAMD);
    LoadFunction(gpa, device, "vkGetCalibratedTimestampsEXT", &table->GetCalibratedTimestampsEXT);
    LoadFunction(gpa, device, "vkCmdDrawMeshTasksNV", &table->CmdDrawMeshTasksNV);
    LoadFunction(gpa, device, "vkCmdDrawMeshTasksIndirectNV", &table->CmdDrawMeshTasksIndirectNV);
    LoadFunction(gpa, device, "vkCmdDrawMeshTasksIndirectCountNV", &table->CmdDrawMeshTasksIndirectCountNV);
    LoadFunction(gpa, device, "vkCmdSetExclusiveScissorEnableNV", &table->CmdSetExclusiveScissorEnableNV);
    LoadFunction(gpa, device, "vkCmdSetExclusiveScissorNV", &table->CmdSetExclusiveScissorNV);
    LoadFunction(gpa, device, "vkCmdSetCheckpointNV", &table->CmdSetCheckpointNV);
    LoadFunction(gpa, device, "vkGetQueueCheckpointDataNV", &table->GetQueueCheckpointDataNV);
    LoadFunction(gpa, device, "vkInitializePerformanceApiINTEL", &table->InitializePerformanceApiINTEL);
    LoadFunction(gpa, device, "vkUninitializePerformanceApiINTEL", &table->UninitializePerformanceApiINTEL);
    LoadFunction(gpa, device, "vkCmdSetPerformanceMarkerINTEL", &table->CmdSetPerformanceMarkerINTEL);
    LoadFunction(gpa, device, "vkCmdSetPerformanceStreamMarkerINTEL", &table->CmdSetPerformanceStreamMarkerINTEL);
    LoadFunction(gpa, device, "vkCmdSetPerformanceOverrideINTEL", &table->CmdSetPerformanceOverrideINTEL);
    LoadFunction(gpa, device, "vkAcquirePerformanceConfigurationINTEL", &table->AcquirePerformanceConfigurationINTEL);
    LoadFunction(gpa, device, "vkReleasePerformanceConfigurationINTEL", &table->ReleasePerformanceConfigurationINTEL);
    LoadFunction(gpa, device, "vkQueueSetPerformanceConfigurationINTEL", &table->QueueSetPerformanceConfigurationINTEL);
    LoadFunction(gpa, device, "vkGetPerformanceParameterINTEL", &table->GetPerformanceParameterINTEL);
    LoadFunction(gpa, device, "vkSetLocalDimmingAMD", &table->SetLocalDimmingAMD);
    LoadFunction(gpa, device, "vkGetBufferDeviceAddressEXT", &table->GetBufferDeviceAddressEXT);
    LoadFunction(gpa, device, "vkAcquireFullScreenExclusiveModeEXT", &table->AcquireFullScreenExclusiveModeEXT);
    LoadFunction(gpa, device, "vkReleaseFullScreenExclusiveModeEXT", &table->ReleaseFullScreenExclusiveModeEXT);
    LoadFunction(gpa, device, "vkGetDeviceGroupSurfacePresentModes2EXT", &table->GetDeviceGroupSurfacePresentModes2EXT);
    LoadFunction(gpa, device, "vkCmdSetLineStippleEXT", &table->CmdSetLineStippleEXT);
    LoadFunction(gpa, device, "vkResetQueryPoolEXT", &table->ResetQueryPoolEXT);
    LoadFunction(gpa, device, "vkCmdSetCullModeEXT", &table->CmdSetCullModeEXT);
    LoadFunction(gpa, device, "vkCmdSetFrontFaceEXT", &table->CmdSetFrontFaceEXT);
    LoadFunction(gpa, device, "vkCmdSetPrimitiveTopologyEXT", &table->CmdSetPrimitiveTopologyEXT);
    LoadFunction(gpa, device, "vkCmdSetViewportWithCountEXT", &table->CmdSetViewportWithCountEXT);
    LoadFunction(gpa, device, "vkCmdSetScissorWithCountEXT", &table->CmdSetScissorWithCountEXT);
    LoadFunction(gpa, device, "vkCmdBindVertexBuffers2EXT", &table->CmdBindVertexBuffers2EXT);
    LoadFunction(gpa, device, "vkCmdSetDepthTestEnableEXT", &table->CmdSetDepthTestEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetDepthWriteEnableEXT", &table->CmdSetDepthWriteEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetDepthCompareOpEXT", &table->CmdSetDepthCompareOpEXT);
    LoadFunction(gpa, device, "vkCmdSetDepthBoundsTestEnableEXT", &table->CmdSetDepthBoundsTestEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetStencilTestEnableEXT", &table->CmdSetStencilTestEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetStencilOpEXT", &table->CmdSetStencilOpEXT);
    LoadFunction(gpa, device, "vkReleaseSwapchainImagesEXT", &table->ReleaseSwapchainImagesEXT);
    LoadFunction(gpa, device, "vkGetGeneratedCommandsMemoryRequirementsNV", &table->GetGeneratedCommandsMemoryRequirementsNV);
    LoadFunction(gpa, device, "vkCmdPreprocessGeneratedCommandsNV", &table->CmdPreprocessGeneratedCommandsNV);
    LoadFunction(gpa, device, "vkCmdExecuteGeneratedCommandsNV", &table->CmdExecuteGeneratedCommandsNV);
    LoadFunction(gpa, device, "vkCmdBindPipelineShaderGroupNV", &table->CmdBindPipelineShaderGroupNV);
    LoadFunction(gpa, device, "vkCreateIndirectCommandsLayoutNV", &table->CreateIndirectCommandsLayoutNV);
    LoadFunction(gpa, device, "vkDestroyIndirectCommandsLayoutNV", &table->DestroyIndirectCommandsLayoutNV);
    LoadFunction(gpa, device, "vkCreatePrivateDataSlotEXT", &table->CreatePrivateDataSlotEXT);
    LoadFunction(gpa, device, "vkDestroyPrivateDataSlotEXT", &table->DestroyPrivateDataSlotEXT);
    LoadFunction(gpa, device, "vkSetPrivateDataEXT", &table->SetPrivateDataEXT);
    LoadFunction(gpa, device, "vkGetPrivateDataEXT", &table->GetPrivateDataEXT);
    LoadFunction(gpa, device, "vkCmdSetFragmentShadingRateEnumNV", &table->CmdSetFragmentShadingRateEnumNV);
    LoadFunction(gpa, device, "vkGetImageSubresourceLayout2EXT", &table->GetImageSubresourceLayout2EXT);
    LoadFunction(gpa, device, "vkGetDeviceFaultInfoEXT", &table->GetDeviceFaultInfoEXT);
    LoadFunction(gpa, device, "vkCmdSetVertexInputEXT", &table->CmdSetVertexInputEXT);
    LoadFunction(gpa, device, "vkGetMemoryZirconHandleFUCHSIA", &table->GetMemoryZirconHandleFUCHSIA);
    LoadFunction(gpa, device, "vkGetMemoryZirconHandlePropertiesFUCHSIA", &table->GetMemoryZirconHandlePropertiesFUCHSIA);
    LoadFunction(gpa, device, "vkImportSemaphoreZirconHandleFUCHSIA", &table->ImportSemaphoreZirconHandleFUCHSIA);
    LoadFunction(gpa, device, "vkGetSemaphoreZirconHandleFUCHSIA", &table->GetSemaphoreZirconHandleFUCHSIA);
    LoadFunction(gpa, device, "vkCmdBindInvocationMaskHUAWEI", &table->CmdBindInvocationMaskHUAWEI);
    LoadFunction(gpa, device, "vkGetMemoryRemoteAddressNV", &table->GetMemoryRemoteAddressNV);
    LoadFunction(gpa, device, "vkCmdSetPatchControlPointsEXT", &table->CmdSetPatchControlPointsEXT);
    LoadFunction(gpa, device, "vkCmdSetRasterizerDiscardEnableEXT", &table->CmdSetRasterizerDiscardEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetDepthBiasEnableEXT", &table->CmdSetDepthBiasEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetLogicOpEXT", &table->CmdSetLogicOpEXT);
    LoadFunction(gpa, device, "vkCmdSetPrimitiveRestartEnableEXT", &table->CmdSetPrimitiveRestartEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetColorWriteEnableEXT", &table->CmdSetColorWriteEnableEXT);
    LoadFunction(gpa, device, "vkCmdDrawMultiEXT", &table->CmdDrawMultiEXT);
    LoadFunction(gpa, device, "vkCmdDrawMultiIndexedEXT", &table->CmdDrawMultiIndexedEXT);
    LoadFunction(gpa, device, "vkCreateMicromapEXT", &table->CreateMicromapEXT);
    LoadFunction(gpa, device, "vkDestroyMicromapEXT", &table->DestroyMicromapEXT);
    LoadFunction(gpa, device, "vkCmdBuildMicromapsEXT", &table->CmdBuildMicromapsEXT);
    LoadFunction(gpa, device, "vkBuildMicromapsEXT", &table->BuildMicromapsEXT);
    LoadFunction(gpa, device, "vkCopyMicromapEXT", &table->CopyMicromapEXT);
    LoadFunction(gpa, device, "vkCopyMicromapToMemoryEXT", &table->CopyMicromapToMemoryEXT);
    LoadFunction(gpa, device, "vkCopyMemoryToMicromapEXT", &table->CopyMemoryToMicromapEXT);
    LoadFunction(gpa, device, "vkWriteMicromapsPropertiesEXT", &table->WriteMicromapsPropertiesEXT);
    LoadFunction(gpa, device, "vkCmdCopyMicromapEXT", &table->CmdCopyMicromapEXT);
    LoadFunction(gpa, device, "vkCmdCopyMicromapToMemoryEXT", &table->CmdCopyMicromapToMemoryEXT);
    LoadFunction(gpa, device, "vkCmdCopyMemoryToMicromapEXT", &table->CmdCopyMemoryToMicromapEXT);
    LoadFunction(gpa, device, "vkCmdWriteMicromapsPropertiesEXT", &table->CmdWriteMicromapsPropertiesEXT);
    LoadFunction(gpa, device, "vkGetDeviceMicromapCompatibilityEXT", &table->GetDeviceMicromapCompatibilityEXT);
    LoadFunction(gpa, device, "vkGetMicromapBuildSizesEXT", &table->GetMicromapBuildSizesEXT);
    LoadFunction(gpa, device, "vkCmdDrawClusterHUAWEI", &table->CmdDrawClusterHUAWEI);
    LoadFunction(gpa, device, "vkCmdDrawClusterIndirectHUAWEI", &table->CmdDrawClusterIndirectHUAWEI);
    LoadFunction(gpa, device, "vkSetDeviceMemoryPriorityEXT", &table->SetDeviceMemoryPriorityEXT);
    LoadFunction(gpa, device, "vkGetDescriptorSetLayoutHostMappingInfoVALVE", &table->GetDescriptorSetLayoutHostMappingInfoVALVE);
    LoadFunction(gpa, device, "vkGetDescriptorSetHostMappingVALVE", &table->GetDescriptorSetHostMappingVALVE);
    LoadFunction(gpa, device, "vkCmdSetTessellationDomainOriginEXT", &table->CmdSetTessellationDomainOriginEXT);
    LoadFunction(gpa, device, "vkCmdSetDepthClampEnableEXT", &table->CmdSetDepthClampEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetPolygonModeEXT", &table->CmdSetPolygonModeEXT);
    LoadFunction(gpa, device, "vkCmdSetRasterizationSamplesEXT", &table->CmdSetRasterizationSamplesEXT);
    LoadFunction(gpa, device, "vkCmdSetSampleMaskEXT", &table->CmdSetSampleMaskEXT);
    LoadFunction(gpa, device, "vkCmdSetAlphaToCoverageEnableEXT", &table->CmdSetAlphaToCoverageEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetAlphaToOneEnableEXT", &table->CmdSetAlphaToOneEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetLogicOpEnableEXT", &table->CmdSetLogicOpEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetColorBlendEnableEXT", &table->CmdSetColorBlendEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetColorBlendEquationEXT", &table->CmdSetColorBlendEquationEXT);
    LoadFunction(gpa, device, "vkCmdSetColorWriteMaskEXT", &table->CmdSetColorWriteMaskEXT);
    LoadFunction(gpa, device, "vkCmdSetRasterizationStreamEXT", &table->CmdSetRasterizationStreamEXT);
    LoadFunction(gpa, device, "vkCmdSetConservativeRasterizationModeEXT", &table->CmdSetConservativeRasterizationModeEXT);
    LoadFunction(gpa, device, "vkCmdSetExtraPrimitiveOverestimationSizeEXT", &table->CmdSetExtraPrimitiveOverestimationSizeEXT);
    LoadFunction(gpa, device, "vkCmdSetDepthClipEnableEXT", &table->CmdSetDepthClipEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetSampleLocationsEnableEXT", &table->CmdSetSampleLocationsEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetColorBlendAdvancedEXT", &table->CmdSetColorBlendAdvancedEXT);
    LoadFunction(gpa, device, "vkCmdSetProvokingVertexModeEXT", &table->CmdSetProvokingVertexModeEXT);
    LoadFunction(gpa, device, "vkCmdSetLineRasterizationModeEXT", &table->CmdSetLineRasterizationModeEXT);
    LoadFunction(gpa, device, "vkCmdSetLineStippleEnableEXT", &table->CmdSetLineStippleEnableEXT);
    LoadFunction(gpa, device, "vkCmdSetDepthClipNegativeOneToOneEXT", &table->CmdSetDepthClipNegativeOneToOneEXT);
    LoadFunction(gpa, device, "vkCmdSetViewportWScalingEnableNV", &table->CmdSetViewportWScalingEnableNV);
    LoadFunction(gpa, device, "vkCmdSetViewportSwizzleNV", &table->CmdSetViewportSwizzleNV);
    LoadFunction(gpa, device, "vkCmdSetCoverageToColorEnableNV", &table->CmdSetCoverageToColorEnableNV);
    LoadFunction(gpa, device, "vkCmdSetCoverageToColorLocationNV", &table->CmdSetCoverageToColorLocationNV);
    LoadFunction(gpa, device, "vkCmdSetCoverageModulationModeNV", &table->CmdSetCoverageModulationModeNV);
    LoadFunction(gpa, device, "vkCmdSetCoverageModulationTableEnableNV", &table->CmdSetCoverageModulationTableEnableNV);
    LoadFunction(gpa, device, "vkCmdSetCoverageModulationTableNV", &table->CmdSetCoverageModulationTableNV);
    LoadFunction(gpa, device, "vkCmdSetShadingRateImageEnableNV", &table->CmdSetShadingRateImageEnableNV);
    LoadFunction(gpa, device, "vkCmdSetRepresentativeFragmentTestEnableNV", &table->CmdSetRepresentativeFragmentTestEnableNV);
    LoadFunction(gpa, device, "vkCmdSetCoverageReductionModeNV", &table->CmdSetCoverageReductionModeNV);
    LoadFunction(gpa, device, "vkGetShaderModuleIdentifierEXT", &table->GetShaderModuleIdentifierEXT);
    LoadFunction(gpa, device, "vkGetShaderModuleCreateInfoIdentifierEXT", &table->GetShaderModuleCreateInfoIdentifierEXT);
    LoadFunction(gpa, device, "vkCreateOpticalFlowSessionNV", &table->CreateOpticalFlowSessionNV);
    LoadFunction(gpa, device, "vkDestroyOpticalFlowSessionNV", &table->DestroyOpticalFlowSessionNV);
    LoadFunction(gpa, device, "vkBindOpticalFlowSessionImageNV", &table->BindOpticalFlowSessionImageNV);
    LoadFunction(gpa, device, "vkCmdOpticalFlowExecuteNV", &table->CmdOpticalFlowExecuteNV);
    LoadFunction(gpa, device, "vkCreateShadersEXT", &table->CreateShadersEXT);
    LoadFunction(gpa, device, "vkDestroyShaderEXT", &table->DestroyShaderEXT);
    LoadFunction(gpa, device, "vkGetShaderBinaryDataEXT", &table->GetShaderBinaryDataEXT);
    LoadFunction(gpa, device, "vkCmdBindShadersEXT", &table->CmdBindShadersEXT);
    LoadFunction(gpa, device, "vkGetFramebufferTilePropertiesQCOM", &table->GetFramebufferTilePropertiesQCOM);
    LoadFunction(gpa, device, "vkGetDynamicRenderingTilePropertiesQCOM", &table->GetDynamicRenderingTilePropertiesQCOM);
    LoadFunction(gpa, device, "vkCmdSetAttachmentFeedbackLoopEnableEXT", &table->CmdSetAttachmentFeedbackLoopEnableEXT);
    LoadFunction(gpa, device, "vkCreateAccelerationStructureKHR", &table->CreateAccelerationStructureKHR);
    LoadFunction(gpa, device, "vkDestroyAccelerationStructureKHR", &table->DestroyAccelerationStructureKHR);
    LoadFunction(gpa, device, "vkCmdBuildAccelerationStructuresKHR", &table->CmdBuildAccelerationStructuresKHR);
    LoadFunction(gpa, device, "vkCmdBuildAccelerationStructuresIndirectKHR", &table->CmdBuildAccelerationStructuresIndirectKHR);
    LoadFunction(gpa, device, "vkBuildAccelerationStructuresKHR", &table->BuildAccelerationStructuresKHR);
    LoadFunction(gpa, device, "vkCopyAccelerationStructureKHR", &table->CopyAccelerationStructureKHR);
    LoadFunction(gpa, device, "vkCopyAccelerationStructureToMemoryKHR", &table->CopyAccelerationStructureToMemoryKHR);
    LoadFunction(gpa, device, "vkCopyMemoryToAccelerationStructureKHR", &table->CopyMemoryToAccelerationStructureKHR);
    LoadFunction(gpa, device, "vkWriteAccelerationStructuresPropertiesKHR", &table->WriteAccelerationStructuresPropertiesKHR);
    LoadFunction(gpa, device, "vkCmdCopyAccelerationStructureKHR", &table->CmdCopyAccelerationStructureKHR);
    LoadFunction(gpa, device, "vkCmdCopyAccelerationStructureToMemoryKHR", &table->CmdCopyAccelerationStructureToMemoryKHR);
    LoadFunction(gpa, device, "vkCmdCopyMemoryToAccelerationStructureKHR", &table->CmdCopyMemoryToAccelerationStructureKHR);
    LoadFunction(gpa, device, "vkGetAccelerationStructureDeviceAddressKHR", &table->GetAccelerationStructureDeviceAddressKHR);
    LoadFunction(gpa, device, "vkCmdWriteAccelerationStructuresPropertiesKHR", &table->CmdWriteAccelerationStructuresPropertiesKHR);
    LoadFunction(gpa, device, "vkGetDeviceAccelerationStructureCompatibilityKHR", &table->GetDeviceAccelerationStructureCompatibilityKHR);
    LoadFunction(gpa, device, "vkGetAccelerationStructureBuildSizesKHR", &table->GetAccelerationStructureBuildSizesKHR);
    LoadFunction(gpa, device, "vkCmdTraceRaysKHR", &table->CmdTraceRaysKHR);
    LoadFunction(gpa, device, "vkCreateRayTracingPipelinesKHR", &table->CreateRayTracingPipelinesKHR);
    LoadFunction(gpa, device, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR", &table->GetRayTracingCaptureReplayShaderGroupHandlesKHR);
    LoadFunction(gpa, device, "vkCmdTraceRaysIndirectKHR", &table->CmdTraceRaysIndirectKHR);
    LoadFunction(gpa, device, "vkGetRayTracingShaderGroupStackSizeKHR", &table->GetRayTracingShaderGroupStackSizeKHR);
    LoadFunction(gpa, device, "vkCmdSetRayTracingPipelineStackSizeKHR", &table->CmdSetRayTracingPipelineStackSizeKHR);
    LoadFunction(gpa, device, "vkCmdDrawMeshTasksEXT", &table->CmdDrawMeshTasksEXT);
    LoadFunction(gpa, device, "vkCmdDrawMeshTasksIndirectEXT", &table->CmdDrawMeshTasksIndirectEXT);
    LoadFunction(gpa, device, "vkCmdDrawMeshTasksIndirectCountEXT", &table->CmdDrawMeshTasksIndirectCountEXT);
}


#endif
